%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: Figure_convergence-black.pdf
%%Creator: Adobe Acrobat 18.11.0
%%For: wenping
%%CreationDate: 2018/7/28, 17:14:06
%%BoundingBox: 0 0 535 458
%%HiResBoundingBox: 0 0 534.2400 457.9201
%%CropBox: 0 0 534.2400 457.9201
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 571 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c015 84.159810, 2016/09/10-02:41:30        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreateDate="2018-07-28T17:12:33+08:00"
   xmp:CreatorTool="matplotlib 2.1.0, http://matplotlib.org"
   pdf:Producer="matplotlib pdf backend 2.1.0"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -457.92 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 457.92 li
534.24 457.92 li
534.24 0 li
cp
clp
0 457.92 mo
534.24 457.92 li
534.24 0 li
0 0 li
0 457.92 li
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
f
66.144 426.302 mo
529.152 426.302 li
529.152 14.1738 li
66.144 14.1738 li
66.144 426.302 li
f
gsave
66.144 426.302 mo
529.152 426.302 li
529.152 14.1738 li
66.144 14.1738 li
66.144 426.302 li
clp
87.1898 426.302 mo
130.733 426.302 li
130.733 233.975 li
87.1898 233.975 li
cp
gsave
/1 
[/DeviceCMYK] /CSA add_res
grestore
/875257608.0 
<<
/ID /875257608.0 
/PaintType 1
/PatternType 1
/TilingType 2
/BBox [0 0 72 72 ] 
/XStep 72 
/YStep 72 
/PaintProc { begin save
Adobe_AGM_Core/AGMCORE_pattern_paint_type 1 put
gsave
0 0 mo
72 0 li
72 72 li
0 72 li
cp
clp
0 0 mo
72 0 li
72 72 li
0 72 li
cp
false sop
0 0 0 0 cmyk
f
{-36 36 mo
36 108 li
-24 24 mo
48 96 li
-12 12 mo
60 84 li
0 0 mo
72 72 li
12 -12 mo
84 60 li
24 -24 mo
96 48 li
36 -36 mo
108 36 li
}exec
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
{-36 36 mo
36 108 li
-24 24 mo
48 96 li
-12 12 mo
60 84 li
0 0 mo
72 72 li
12 -12 mo
84 60 li
24 -24 mo
96 48 li
36 -36 mo
108 36 li
}exec
.92929 .879301 .889677 .799283 cmyk
@
grestore
Adobe_AGM_Core/AGMCORE_pattern_paint_type 0 put
restore end }
>>
/Pattern add_res
/875257608.0 /Pattern get_res
[1 0 0 -1 0 0 ]make_pattern set_pattern
f
2 vmreclaim
2 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
87.1898 426.302 mo
130.733 426.302 li
130.733 233.975 li
87.1898 233.975 li
cp
false sop
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
66.144 426.302 mo
529.152 426.302 li
529.152 14.1738 li
66.144 14.1738 li
66.144 426.302 li
clp
232.333 426.302 mo
275.876 426.302 li
275.876 135.751 li
232.333 135.751 li
cp
/875257608.0 /Pattern get_res
[1 0 0 -1 0 0 ]make_pattern set_pattern
f
2 vmreclaim
2 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
232.333 426.302 mo
275.876 426.302 li
275.876 135.751 li
232.333 135.751 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
66.144 426.302 mo
529.152 426.302 li
529.152 14.1738 li
66.144 14.1738 li
66.144 426.302 li
clp
377.477 426.302 mo
421.02 426.302 li
421.02 230.884 li
377.477 230.884 li
cp
/875257608.0 /Pattern get_res
[1 0 0 -1 0 0 ]make_pattern set_pattern
f
2 vmreclaim
2 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
377.477 426.302 mo
421.02 426.302 li
421.02 230.884 li
377.477 230.884 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
66.144 426.302 mo
529.152 426.302 li
529.152 14.1738 li
66.144 14.1738 li
66.144 426.302 li
clp
130.733 426.302 mo
174.276 426.302 li
174.276 231.571 li
130.733 231.571 li
cp
gsave
grestore
/875257804.0 
<<
/ID /875257804.0 
/PaintType 1
/PatternType 1
/TilingType 2
/BBox [0 0 72 72 ] 
/XStep 72 
/YStep 72 
/PaintProc { begin save
Adobe_AGM_Core/AGMCORE_pattern_paint_type 1 put
gsave
0 0 mo
72 0 li
72 72 li
0 72 li
cp
clp
0 0 mo
72 0 li
72 72 li
0 72 li
cp
false sop
0 0 0 0 cmyk
f
{-36 36 mo
36 -36 li
-24 48 mo
48 -24 li
-12 60 mo
60 -12 li
0 72 mo
72 0 li
12 84 mo
84 12 li
24 96 mo
96 24 li
36 108 mo
108 36 li
}exec
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
{-36 36 mo
36 -36 li
-24 48 mo
48 -24 li
-12 60 mo
60 -12 li
0 72 mo
72 0 li
12 84 mo
84 12 li
24 96 mo
96 24 li
36 108 mo
108 36 li
}exec
.92929 .879301 .889677 .799283 cmyk
@
grestore
Adobe_AGM_Core/AGMCORE_pattern_paint_type 0 put
restore end }
>>
/Pattern add_res
/875257804.0 /Pattern get_res
[1 0 0 -1 0 0 ]make_pattern set_pattern
f
2 vmreclaim
2 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
130.733 426.302 mo
174.276 426.302 li
174.276 231.571 li
130.733 231.571 li
cp
false sop
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
66.144 426.302 mo
529.152 426.302 li
529.152 14.1738 li
66.144 14.1738 li
66.144 426.302 li
clp
275.876 426.302 mo
319.42 426.302 li
319.42 135.751 li
275.876 135.751 li
cp
/875257804.0 /Pattern get_res
[1 0 0 -1 0 0 ]make_pattern set_pattern
f
2 vmreclaim
2 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
275.876 426.302 mo
319.42 426.302 li
319.42 135.751 li
275.876 135.751 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
66.144 426.302 mo
529.152 426.302 li
529.152 14.1738 li
66.144 14.1738 li
66.144 426.302 li
clp
421.02 426.302 mo
464.563 426.302 li
464.563 228.48 li
421.02 228.48 li
cp
/875257804.0 /Pattern get_res
[1 0 0 -1 0 0 ]make_pattern set_pattern
f
2 vmreclaim
2 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
421.02 426.302 mo
464.563 426.302 li
464.563 228.48 li
421.02 228.48 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
66.144 426.302 mo
529.152 426.302 li
529.152 14.1738 li
66.144 14.1738 li
66.144 426.302 li
clp
174.276 426.302 mo
217.819 426.302 li
217.819 231.571 li
174.276 231.571 li
cp
gsave
grestore
/875258000.0 
<<
/ID /875258000.0 
/PaintType 1
/PatternType 1
/TilingType 2
/BBox [0 0 72 72 ] 
/XStep 72 
/YStep 72 
/PaintProc { begin save
Adobe_AGM_Core/AGMCORE_pattern_paint_type 1 put
gsave
0 0 mo
72 0 li
72 72 li
0 72 li
cp
clp
0 0 mo
72 0 li
72 72 li
0 72 li
cp
false sop
0 0 0 0 cmyk
f
{-36 36 mo
36 108 li
-24 24 mo
48 96 li
-12 12 mo
60 84 li
0 0 mo
72 72 li
12 -12 mo
84 60 li
24 -24 mo
96 48 li
36 -36 mo
108 36 li
-36 36 mo
36 -36 li
-24 48 mo
48 -24 li
-12 60 mo
60 -12 li
0 72 mo
72 0 li
12 84 mo
84 12 li
24 96 mo
96 24 li
36 108 mo
108 36 li
}exec
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
{-36 36 mo
36 108 li
-24 24 mo
48 96 li
-12 12 mo
60 84 li
0 0 mo
72 72 li
12 -12 mo
84 60 li
24 -24 mo
96 48 li
36 -36 mo
108 36 li
-36 36 mo
36 -36 li
-24 48 mo
48 -24 li
-12 60 mo
60 -12 li
0 72 mo
72 0 li
12 84 mo
84 12 li
24 96 mo
96 24 li
36 108 mo
108 36 li
}exec
.92929 .879301 .889677 .799283 cmyk
@
grestore
Adobe_AGM_Core/AGMCORE_pattern_paint_type 0 put
restore end }
>>
/Pattern add_res
/875258000.0 /Pattern get_res
[1 0 0 -1 0 0 ]make_pattern set_pattern
f
2 vmreclaim
2 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
174.276 426.302 mo
217.819 426.302 li
217.819 231.571 li
174.276 231.571 li
cp
false sop
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
66.144 426.302 mo
529.152 426.302 li
529.152 14.1738 li
66.144 14.1738 li
66.144 426.302 li
clp
319.42 426.302 mo
362.963 426.302 li
362.963 346.28 li
319.42 346.28 li
cp
/875258000.0 /Pattern get_res
[1 0 0 -1 0 0 ]make_pattern set_pattern
f
2 vmreclaim
2 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
319.42 426.302 mo
362.963 426.302 li
362.963 346.28 li
319.42 346.28 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
66.144 426.302 mo
529.152 426.302 li
529.152 14.1738 li
66.144 14.1738 li
66.144 426.302 li
clp
464.563 426.302 mo
508.106 426.302 li
508.106 374.786 li
464.563 374.786 li
cp
/875258000.0 /Pattern get_res
[1 0 0 -1 0 0 ]make_pattern set_pattern
f
2 vmreclaim
2 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
464.563 426.302 mo
508.106 426.302 li
508.106 374.786 li
464.563 374.786 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
152.504 426.302 mo
152.504 429.802 li
1 /0 /CSD get_res sepcs
1 sep
f
.8 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
152.504 426.302 mo
152.504 429.802 li
@
142.684 433.019 mo
155.024 433.019 li
154.704 434.679 li
149.504 434.679 li
147.004 447.599 li
145.024 447.599 li
147.524 434.679 li
142.364 434.679 li
142.684 433.019 li
f
155.457 449.718 mo
157.711 449.718 li
157.711 441.934 li
155.261 442.424 li
155.261 441.164 li
157.697 440.674 li
159.083 440.674 li
159.083 449.718 li
161.337 449.718 li
161.337 450.88 li
155.457 450.88 li
155.457 449.718 li
f
297.648 426.302 mo
297.648 429.802 li
f
297.648 426.302 mo
297.648 429.802 li
@
287.828 433.019 mo
300.168 433.019 li
299.848 434.679 li
294.648 434.679 li
292.148 447.599 li
290.168 447.599 li
292.668 434.679 li
287.508 434.679 li
287.828 433.019 li
f
301.553 449.718 mo
306.369 449.718 li
306.369 450.88 li
299.887 450.88 li
299.887 449.718 li
300.405 449.186 301.119 448.458 302.029 447.534 cv
302.925 446.624 303.499 446.036 303.737 445.77 cv
304.185 445.28 304.493 444.86 304.661 444.51 cv
304.829 444.174 304.927 443.824 304.927 443.488 cv
304.927 442.956 304.731 442.508 304.353 442.172 cv
303.975 441.836 303.485 441.654 302.869 441.654 cv
302.435 441.654 301.973 441.738 301.497 441.878 cv
301.021 442.032 300.503 442.256 299.957 442.564 cv
299.957 441.164 li
300.517 440.94 301.035 440.772 301.511 440.66 cv
301.987 440.548 302.435 440.492 302.841 440.492 cv
303.891 440.492 304.731 440.758 305.361 441.29 cv
305.991 441.822 306.313 442.522 306.313 443.404 cv
306.313 443.824 306.229 444.23 306.075 444.594 cv
305.921 444.972 305.641 445.42 305.221 445.924 cv
305.109 446.064 304.745 446.442 304.129 447.072 cv
303.513 447.702 302.659 448.584 301.553 449.718 cv
f
442.792 426.302 mo
442.792 429.802 li
f
442.792 426.302 mo
442.792 429.802 li
@
432.972 433.019 mo
445.312 433.019 li
444.992 434.679 li
439.792 434.679 li
437.292 447.599 li
435.312 447.599 li
437.812 434.679 li
432.652 434.679 li
432.972 433.019 li
f
449.692 445.378 mo
450.35 445.518 450.868 445.812 451.232 446.26 cv
451.596 446.708 451.792 447.268 451.792 447.912 cv
451.792 448.92 451.442 449.704 450.756 450.25 cv
450.056 450.796 449.076 451.062 447.802 451.062 cv
447.368 451.062 446.92 451.02 446.472 450.936 cv
446.024 450.866 445.548 450.74 445.072 450.572 cv
445.072 449.242 li
445.45 449.466 445.87 449.634 446.332 449.746 cv
446.78 449.858 447.256 449.914 447.76 449.914 cv
448.628 449.914 449.286 449.746 449.734 449.41 cv
450.182 449.074 450.42 448.57 450.42 447.912 cv
450.42 447.324 450.21 446.848 449.79 446.512 cv
449.37 446.176 448.782 445.994 448.026 445.994 cv
446.836 445.994 li
446.836 444.86 li
448.082 444.86 li
448.754 444.86 449.272 444.734 449.636 444.454 cv
450 444.188 450.182 443.796 450.182 443.278 cv
450.182 442.76 449.986 442.354 449.622 442.074 cv
449.244 441.794 448.712 441.654 448.026 441.654 cv
447.648 441.654 447.242 441.696 446.808 441.78 cv
446.374 441.864 445.898 441.99 445.38 442.158 cv
445.38 440.926 li
445.898 440.786 446.388 440.674 446.85 440.604 cv
447.298 440.534 447.732 440.492 448.152 440.492 cv
449.188 440.492 450.014 440.73 450.63 441.206 cv
451.246 441.682 451.554 442.326 451.554 443.138 cv
451.554 443.698 451.386 444.174 451.064 444.566 cv
450.742 444.958 450.28 445.238 449.692 445.378 cv
f
66.144 426.302 mo
62.644 426.302 li
f
66.144 426.302 mo
62.644 426.302 li
@
49.864 426.707 mo
49.864 425.207 50.084 423.907 50.544 422.807 cv
50.984 421.727 51.604 420.907 52.364 420.367 cv
52.944 419.947 53.544 419.727 54.184 419.727 cv
55.184 419.727 56.104 420.247 56.924 421.287 cv
57.924 422.567 58.424 424.307 58.424 426.507 cv
58.424 428.047 58.204 429.347 57.764 430.427 cv
57.324 431.507 56.744 432.267 56.064 432.747 cv
55.384 433.227 54.724 433.467 54.084 433.467 cv
52.804 433.467 51.764 432.727 50.924 431.247 cv
50.204 430.007 49.864 428.487 49.864 426.707 cv
51.784 426.947 mo
51.784 428.787 52.004 430.267 52.464 431.407 cv
52.824 432.387 53.364 432.867 54.124 432.867 cv
54.464 432.867 54.824 432.727 55.204 432.407 cv
55.584 432.087 55.864 431.567 56.064 430.807 cv
56.364 429.687 56.524 428.107 56.524 426.067 cv
56.524 424.567 56.364 423.307 56.044 422.287 cv
55.804 421.547 55.504 421.027 55.144 420.707 cv
54.864 420.487 54.544 420.367 54.164 420.367 cv
53.724 420.367 53.324 420.567 52.984 420.967 cv
52.504 421.527 52.184 422.367 52.024 423.527 cv
51.864 424.687 51.784 425.827 51.784 426.947 cv
f
66.144 357.614 mo
62.644 357.614 li
f
66.144 357.614 mo
62.644 357.614 li
@
48.304 362.019 mo
47.384 364.559 li
39.564 364.559 li
39.564 364.199 li
41.864 362.119 43.484 360.399 44.424 359.059 cv
45.344 357.739 45.824 356.519 45.824 355.419 cv
45.824 354.579 45.564 353.899 45.044 353.359 cv
44.524 352.819 43.924 352.539 43.224 352.539 cv
42.564 352.539 41.984 352.739 41.464 353.119 cv
40.944 353.499 40.564 354.059 40.324 354.779 cv
39.964 354.779 li
40.124 353.579 40.524 352.659 41.204 352.019 cv
41.884 351.379 42.724 351.039 43.724 351.039 cv
44.804 351.039 45.704 351.399 46.424 352.079 cv
47.144 352.779 47.504 353.599 47.504 354.519 cv
47.504 355.199 47.344 355.859 47.044 356.539 cv
46.544 357.599 45.764 358.719 44.684 359.879 cv
43.064 361.659 42.044 362.719 41.644 363.079 cv
45.104 363.079 li
45.804 363.079 46.304 363.059 46.584 362.999 cv
46.864 362.959 47.124 362.859 47.364 362.699 cv
47.584 362.539 47.784 362.319 47.944 362.019 cv
48.304 362.019 li
f
49.864 358.019 mo
49.864 356.519 50.084 355.219 50.544 354.119 cv
50.984 353.039 51.604 352.219 52.364 351.679 cv
52.944 351.259 53.544 351.039 54.184 351.039 cv
55.184 351.039 56.104 351.559 56.924 352.599 cv
57.924 353.879 58.424 355.619 58.424 357.819 cv
58.424 359.359 58.204 360.659 57.764 361.739 cv
57.324 362.819 56.744 363.579 56.064 364.059 cv
55.384 364.539 54.724 364.779 54.084 364.779 cv
52.804 364.779 51.764 364.039 50.924 362.559 cv
50.204 361.319 49.864 359.799 49.864 358.019 cv
51.784 358.259 mo
51.784 360.099 52.004 361.579 52.464 362.719 cv
52.824 363.699 53.364 364.179 54.124 364.179 cv
54.464 364.179 54.824 364.039 55.204 363.719 cv
55.584 363.399 55.864 362.879 56.064 362.119 cv
56.364 360.999 56.524 359.419 56.524 357.379 cv
56.524 355.879 56.364 354.619 56.044 353.599 cv
55.804 352.859 55.504 352.339 55.144 352.019 cv
54.864 351.799 54.544 351.679 54.164 351.679 cv
53.724 351.679 53.324 351.879 52.984 352.279 cv
52.504 352.839 52.184 353.679 52.024 354.839 cv
51.864 355.999 51.784 357.139 51.784 358.259 cv
f
66.144 288.926 mo
62.644 288.926 li
f
66.144 288.926 mo
62.644 288.926 li
@
48.444 290.991 mo
48.444 292.371 li
46.664 292.371 li
46.664 295.871 li
45.064 295.871 li
45.064 292.371 li
39.464 292.371 li
39.464 291.131 li
45.604 282.351 li
46.664 282.351 li
46.664 290.991 li
48.444 290.991 li
45.064 290.991 mo
45.064 284.411 li
40.404 290.991 li
45.064 290.991 li
f
49.864 289.331 mo
49.864 287.831 50.084 286.531 50.544 285.431 cv
50.984 284.351 51.604 283.531 52.364 282.991 cv
52.944 282.571 53.544 282.351 54.184 282.351 cv
55.184 282.351 56.104 282.871 56.924 283.911 cv
57.924 285.191 58.424 286.931 58.424 289.131 cv
58.424 290.671 58.204 291.971 57.764 293.051 cv
57.324 294.131 56.744 294.891 56.064 295.371 cv
55.384 295.851 54.724 296.091 54.084 296.091 cv
52.804 296.091 51.764 295.351 50.924 293.871 cv
50.204 292.631 49.864 291.111 49.864 289.331 cv
51.784 289.571 mo
51.784 291.411 52.004 292.891 52.464 294.031 cv
52.824 295.011 53.364 295.491 54.124 295.491 cv
54.464 295.491 54.824 295.351 55.204 295.031 cv
55.584 294.711 55.864 294.191 56.064 293.431 cv
56.364 292.311 56.524 290.731 56.524 288.691 cv
56.524 287.191 56.364 285.931 56.044 284.911 cv
55.804 284.171 55.504 283.651 55.144 283.331 cv
54.864 283.111 54.544 282.991 54.164 282.991 cv
53.724 282.991 53.324 283.191 52.984 283.591 cv
52.504 284.151 52.184 284.991 52.024 286.151 cv
51.864 287.311 51.784 288.451 51.784 289.571 cv
f
66.144 220.238 mo
62.644 220.238 li
f
66.144 220.238 mo
62.644 220.238 li
@
48.104 213.663 mo
48.104 214.023 li
47.244 214.123 46.544 214.303 46.004 214.543 cv
45.444 214.803 44.904 215.203 44.384 215.723 cv
43.864 216.243 43.424 216.843 43.064 217.483 cv
42.704 218.123 42.424 218.903 42.204 219.783 cv
43.124 219.143 44.064 218.823 45.024 218.823 cv
45.924 218.823 46.704 219.203 47.364 219.923 cv
48.024 220.643 48.364 221.583 48.364 222.723 cv
48.364 223.843 48.024 224.843 47.364 225.763 cv
46.564 226.863 45.484 227.403 44.164 227.403 cv
43.244 227.403 42.484 227.123 41.864 226.523 cv
40.624 225.363 40.004 223.843 40.004 221.983 cv
40.004 220.803 40.224 219.683 40.704 218.603 cv
41.184 217.543 41.864 216.603 42.744 215.763 cv
43.624 214.943 44.484 214.383 45.284 214.103 cv
46.084 213.823 46.844 213.663 47.544 213.663 cv
48.104 213.663 li
42.044 220.503 mo
41.924 221.383 41.864 222.103 41.864 222.623 cv
41.864 223.263 41.964 223.943 42.204 224.663 cv
42.424 225.403 42.764 225.983 43.244 226.403 cv
43.564 226.723 43.964 226.863 44.444 226.863 cv
45.004 226.863 45.524 226.603 45.964 226.063 cv
46.404 225.543 46.644 224.783 46.644 223.783 cv
46.644 222.683 46.404 221.723 45.964 220.903 cv
45.524 220.103 44.884 219.683 44.084 219.683 cv
43.844 219.683 43.564 219.743 43.284 219.843 cv
43.004 219.943 42.584 220.163 42.044 220.503 cv
f
49.864 220.643 mo
49.864 219.143 50.084 217.843 50.544 216.743 cv
50.984 215.663 51.604 214.843 52.364 214.303 cv
52.944 213.883 53.544 213.663 54.184 213.663 cv
55.184 213.663 56.104 214.183 56.924 215.223 cv
57.924 216.503 58.424 218.243 58.424 220.443 cv
58.424 221.983 58.204 223.283 57.764 224.363 cv
57.324 225.443 56.744 226.203 56.064 226.683 cv
55.384 227.163 54.724 227.403 54.084 227.403 cv
52.804 227.403 51.764 226.663 50.924 225.183 cv
50.204 223.943 49.864 222.423 49.864 220.643 cv
51.784 220.883 mo
51.784 222.723 52.004 224.203 52.464 225.343 cv
52.824 226.323 53.364 226.803 54.124 226.803 cv
54.464 226.803 54.824 226.663 55.204 226.343 cv
55.584 226.023 55.864 225.503 56.064 224.743 cv
56.364 223.623 56.524 222.043 56.524 220.003 cv
56.524 218.503 56.364 217.243 56.044 216.223 cv
55.804 215.483 55.504 214.963 55.144 214.643 cv
54.864 214.423 54.544 214.303 54.164 214.303 cv
53.724 214.303 53.324 214.503 52.984 214.903 cv
52.504 215.463 52.184 216.303 52.024 217.463 cv
51.864 218.623 51.784 219.763 51.784 220.883 cv
f
66.144 151.55 mo
62.644 151.55 li
f
66.144 151.55 mo
62.644 151.55 li
@
42.984 151.835 mo
41.924 150.975 41.244 150.275 40.944 149.755 cv
40.644 149.235 40.504 148.695 40.504 148.135 cv
40.504 147.275 40.824 146.535 41.484 145.915 cv
42.144 145.295 43.024 144.975 44.144 144.975 cv
45.204 144.975 46.064 145.275 46.724 145.855 cv
47.364 146.435 47.704 147.095 47.704 147.835 cv
47.704 148.335 47.524 148.835 47.164 149.355 cv
46.804 149.875 46.084 150.475 44.984 151.155 cv
46.104 152.055 46.864 152.755 47.244 153.255 cv
47.724 153.935 47.984 154.635 47.984 155.355 cv
47.984 156.295 47.624 157.095 46.924 157.735 cv
46.204 158.395 45.284 158.715 44.144 158.715 cv
42.864 158.715 41.884 158.335 41.204 157.555 cv
40.644 156.915 40.364 156.235 40.364 155.475 cv
40.364 154.895 40.544 154.315 40.944 153.735 cv
41.344 153.175 42.024 152.535 42.984 151.835 cv
44.524 150.775 mo
45.284 150.095 45.784 149.535 45.984 149.115 cv
46.184 148.715 46.304 148.255 46.304 147.735 cv
46.304 147.055 46.104 146.535 45.724 146.135 cv
45.344 145.755 44.824 145.555 44.164 145.555 cv
43.484 145.555 42.944 145.755 42.544 146.135 cv
42.124 146.515 41.924 146.955 41.924 147.475 cv
41.924 147.815 42.004 148.155 42.184 148.495 cv
42.344 148.835 42.584 149.155 42.904 149.455 cv
44.524 150.775 li
43.444 152.195 mo
42.884 152.655 42.484 153.155 42.224 153.695 cv
41.964 154.235 41.844 154.815 41.844 155.435 cv
41.844 156.275 42.064 156.955 42.524 157.455 cv
42.984 157.955 43.564 158.195 44.284 158.195 cv
44.984 158.195 45.544 158.015 45.984 157.615 cv
46.404 157.215 46.624 156.735 46.624 156.155 cv
46.624 155.695 46.484 155.275 46.244 154.895 cv
45.764 154.215 44.844 153.315 43.444 152.195 cv
f
49.864 151.955 mo
49.864 150.455 50.084 149.155 50.544 148.055 cv
50.984 146.975 51.604 146.155 52.364 145.615 cv
52.944 145.195 53.544 144.975 54.184 144.975 cv
55.184 144.975 56.104 145.495 56.924 146.535 cv
57.924 147.815 58.424 149.555 58.424 151.755 cv
58.424 153.295 58.204 154.595 57.764 155.675 cv
57.324 156.755 56.744 157.515 56.064 157.995 cv
55.384 158.475 54.724 158.715 54.084 158.715 cv
52.804 158.715 51.764 157.975 50.924 156.495 cv
50.204 155.255 49.864 153.735 49.864 151.955 cv
51.784 152.195 mo
51.784 154.035 52.004 155.515 52.464 156.655 cv
52.824 157.635 53.364 158.115 54.124 158.115 cv
54.464 158.115 54.824 157.975 55.204 157.655 cv
55.584 157.335 55.864 156.815 56.064 156.055 cv
56.364 154.935 56.524 153.355 56.524 151.315 cv
56.524 149.815 56.364 148.555 56.044 147.535 cv
55.804 146.795 55.504 146.275 55.144 145.955 cv
54.864 145.735 54.544 145.615 54.164 145.615 cv
53.724 145.615 53.324 145.815 52.984 146.215 cv
52.504 146.775 52.184 147.615 52.024 148.775 cv
51.864 149.935 51.784 151.075 51.784 152.195 cv
f
66.144 82.8617 mo
62.644 82.8617 li
f
66.144 82.8617 mo
62.644 82.8617 li
@
31.484 77.867 mo
34.704 76.287 li
35.024 76.287 li
35.024 87.467 li
35.024 88.227 35.044 88.687 35.124 88.867 cv
35.184 89.047 35.304 89.187 35.504 89.287 cv
35.704 89.387 36.104 89.447 36.704 89.447 cv
36.704 89.807 li
31.724 89.807 li
31.724 89.447 li
32.344 89.447 32.744 89.387 32.924 89.287 cv
33.104 89.207 33.224 89.067 33.304 88.907 cv
33.384 88.747 33.424 88.267 33.424 87.467 cv
33.424 80.327 li
33.424 79.367 33.384 78.747 33.324 78.467 cv
33.284 78.267 33.204 78.107 33.084 78.007 cv
32.964 77.927 32.804 77.867 32.644 77.867 cv
32.404 77.867 32.064 77.967 31.644 78.167 cv
31.484 77.867 li
f
39.864 83.267 mo
39.864 81.767 40.084 80.467 40.544 79.367 cv
40.984 78.287 41.604 77.467 42.364 76.927 cv
42.944 76.507 43.544 76.287 44.184 76.287 cv
45.184 76.287 46.104 76.807 46.924 77.847 cv
47.924 79.127 48.424 80.867 48.424 83.067 cv
48.424 84.607 48.204 85.907 47.764 86.987 cv
47.324 88.067 46.744 88.827 46.064 89.307 cv
45.384 89.787 44.724 90.027 44.084 90.027 cv
42.804 90.027 41.764 89.287 40.924 87.807 cv
40.204 86.567 39.864 85.047 39.864 83.267 cv
41.784 83.507 mo
41.784 85.347 42.004 86.827 42.464 87.967 cv
42.824 88.947 43.364 89.427 44.124 89.427 cv
44.464 89.427 44.824 89.287 45.204 88.967 cv
45.584 88.647 45.864 88.127 46.064 87.367 cv
46.364 86.247 46.524 84.667 46.524 82.627 cv
46.524 81.127 46.364 79.867 46.044 78.847 cv
45.804 78.107 45.504 77.587 45.144 77.267 cv
44.864 77.047 44.544 76.927 44.164 76.927 cv
43.724 76.927 43.324 77.127 42.984 77.527 cv
42.504 78.087 42.184 78.927 42.024 80.087 cv
41.864 81.247 41.784 82.387 41.784 83.507 cv
f
49.864 83.267 mo
49.864 81.767 50.084 80.467 50.544 79.367 cv
50.984 78.287 51.604 77.467 52.364 76.927 cv
52.944 76.507 53.544 76.287 54.184 76.287 cv
55.184 76.287 56.104 76.807 56.924 77.847 cv
57.924 79.127 58.424 80.867 58.424 83.067 cv
58.424 84.607 58.204 85.907 57.764 86.987 cv
57.324 88.067 56.744 88.827 56.064 89.307 cv
55.384 89.787 54.724 90.027 54.084 90.027 cv
52.804 90.027 51.764 89.287 50.924 87.807 cv
50.204 86.567 49.864 85.047 49.864 83.267 cv
51.784 83.507 mo
51.784 85.347 52.004 86.827 52.464 87.967 cv
52.824 88.947 53.364 89.427 54.124 89.427 cv
54.464 89.427 54.824 89.287 55.204 88.967 cv
55.584 88.647 55.864 88.127 56.064 87.367 cv
56.364 86.247 56.524 84.667 56.524 82.627 cv
56.524 81.127 56.364 79.867 56.044 78.847 cv
55.804 78.107 55.504 77.587 55.144 77.267 cv
54.864 77.047 54.544 76.927 54.164 76.927 cv
53.724 76.927 53.324 77.127 52.984 77.527 cv
52.504 78.087 52.184 78.927 52.024 80.087 cv
51.864 81.247 51.784 82.387 51.784 83.507 cv
f
66.144 14.1737 mo
62.644 14.1737 li
f
66.144 14.1737 mo
62.644 14.1737 li
@
31.484 9.17905 mo
34.704 7.59905 li
35.024 7.59905 li
35.024 18.779 li
35.024 19.539 35.044 19.999 35.124 20.179 cv
35.184 20.359 35.304 20.499 35.504 20.599 cv
35.704 20.699 36.104 20.759 36.704 20.759 cv
36.704 21.119 li
31.724 21.119 li
31.724 20.759 li
32.344 20.759 32.744 20.699 32.924 20.599 cv
33.104 20.519 33.224 20.379 33.304 20.219 cv
33.384 20.059 33.424 19.579 33.424 18.779 cv
33.424 11.639 li
33.424 10.679 33.384 10.059 33.324 9.77905 cv
33.284 9.57905 33.204 9.41905 33.084 9.31905 cv
32.964 9.23905 32.804 9.17905 32.644 9.17905 cv
32.404 9.17905 32.064 9.27905 31.644 9.47905 cv
31.484 9.17905 li
f
48.304 18.579 mo
47.384 21.119 li
39.564 21.119 li
39.564 20.759 li
41.864 18.679 43.484 16.959 44.424 15.619 cv
45.344 14.299 45.824 13.079 45.824 11.979 cv
45.824 11.139 45.564 10.459 45.044 9.91905 cv
44.524 9.37905 43.924 9.09905 43.224 9.09905 cv
42.564 9.09905 41.984 9.29905 41.464 9.67905 cv
40.944 10.059 40.564 10.619 40.324 11.339 cv
39.964 11.339 li
40.124 10.139 40.524 9.21905 41.204 8.57905 cv
41.884 7.93905 42.724 7.59905 43.724 7.59905 cv
44.804 7.59905 45.704 7.95905 46.424 8.63905 cv
47.144 9.33905 47.504 10.159 47.504 11.079 cv
47.504 11.759 47.344 12.419 47.044 13.099 cv
46.544 14.159 45.764 15.279 44.684 16.439 cv
43.064 18.219 42.044 19.279 41.644 19.639 cv
45.104 19.639 li
45.804 19.639 46.304 19.619 46.584 19.559 cv
46.864 19.519 47.124 19.419 47.364 19.259 cv
47.584 19.099 47.784 18.879 47.944 18.579 cv
48.304 18.579 li
f
49.864 14.579 mo
49.864 13.079 50.084 11.779 50.544 10.679 cv
50.984 9.59905 51.604 8.77905 52.364 8.23905 cv
52.944 7.81905 53.544 7.59905 54.184 7.59905 cv
55.184 7.59905 56.104 8.11905 56.924 9.15905 cv
57.924 10.439 58.424 12.179 58.424 14.379 cv
58.424 15.919 58.204 17.219 57.764 18.299 cv
57.324 19.379 56.744 20.139 56.064 20.619 cv
55.384 21.099 54.724 21.339 54.084 21.339 cv
52.804 21.339 51.764 20.599 50.924 19.119 cv
50.204 17.879 49.864 16.359 49.864 14.579 cv
51.784 14.819 mo
51.784 16.659 52.004 18.139 52.464 19.279 cv
52.824 20.259 53.364 20.739 54.124 20.739 cv
54.464 20.739 54.824 20.599 55.204 20.279 cv
55.584 19.959 55.864 19.439 56.064 18.679 cv
56.364 17.559 56.524 15.979 56.524 13.939 cv
56.524 12.439 56.364 11.179 56.044 10.159 cv
55.804 9.41905 55.504 8.89905 55.144 8.57905 cv
54.864 8.35905 54.544 8.23905 54.164 8.23905 cv
53.724 8.23905 53.324 8.43905 52.984 8.83905 cv
52.504 9.39905 52.184 10.239 52.024 11.399 cv
51.864 12.559 51.784 13.699 51.784 14.819 cv
f
7.62275 296.111 mo
10.7227 295.971 li
10.7227 296.351 li
10.1827 296.431 9.80275 296.511 9.56275 296.631 cv
9.18275 296.831 8.90275 297.111 8.72275 297.451 cv
8.54275 297.791 8.44275 298.231 8.44275 298.771 cv
8.44275 300.631 li
18.5627 300.631 li
19.3827 300.631 19.8827 300.551 20.0827 300.371 cv
20.3627 300.131 20.5027 299.751 20.5027 299.231 cv
20.5027 298.771 li
20.8627 298.771 li
20.8627 304.371 li
20.5027 304.371 li
20.5027 303.911 li
20.5027 303.351 20.3427 302.951 20.0027 302.711 cv
19.8027 302.591 19.3227 302.511 18.5627 302.511 cv
8.44275 302.511 li
8.44275 304.091 li
8.44275 304.731 8.50275 305.171 8.58275 305.411 cv
8.72275 305.771 8.96275 306.051 9.30275 306.291 cv
9.66275 306.531 10.1227 306.671 10.7227 306.711 cv
10.7227 307.091 li
7.62275 306.931 li
7.62275 296.111 li
f
11.6627 292.231 mo
13.6627 292.231 li
12.3427 291.491 11.6627 290.731 11.6627 289.931 cv
11.6627 289.571 11.7827 289.291 11.9827 289.051 cv
12.2027 288.811 12.4627 288.691 12.7427 288.691 cv
13.0027 288.691 13.2227 288.791 13.3827 288.951 cv
13.5627 289.111 13.6427 289.311 13.6427 289.551 cv
13.6427 289.791 13.5427 290.031 13.3027 290.311 cv
13.0827 290.591 12.9627 290.811 12.9627 290.931 cv
12.9627 291.051 13.0427 291.191 13.1627 291.311 cv
13.4427 291.611 13.8827 291.911 14.4827 292.231 cv
18.7827 292.231 li
19.2827 292.231 19.6627 292.171 19.9027 292.051 cv
20.0827 291.971 20.2227 291.811 20.3427 291.591 cv
20.4627 291.391 20.5027 291.071 20.5027 290.671 cv
20.8627 290.671 li
20.8627 295.251 li
20.5027 295.251 li
20.5027 294.811 20.4427 294.471 20.3027 294.231 cv
20.2027 294.071 20.0427 293.971 19.8027 293.891 cv
19.6827 293.851 19.3627 293.831 18.8427 293.831 cv
15.3827 293.831 li
14.3427 293.831 13.7227 293.871 13.5227 293.911 cv
13.3227 293.951 13.1827 294.031 13.0827 294.151 cv
13.0027 294.271 12.9427 294.411 12.9427 294.571 cv
12.9427 294.771 13.0027 295.011 13.1027 295.251 cv
12.7427 295.351 li
11.6627 292.631 li
11.6627 292.231 li
f
19.5827 283.111 mo
20.3027 284.031 20.7027 284.611 20.8027 284.851 cv
20.9427 285.211 21.0227 285.571 21.0227 285.971 cv
21.0227 286.591 20.8227 287.091 20.4027 287.491 cv
20.0027 287.891 19.4427 288.091 18.7427 288.091 cv
18.3027 288.091 17.9227 288.011 17.6027 287.811 cv
17.1627 287.551 16.7627 287.091 16.3627 286.431 cv
15.9827 285.771 15.5027 284.671 14.9427 283.111 cv
14.5827 283.111 li
13.7027 283.111 13.0827 283.271 12.7427 283.551 cv
12.4227 283.831 12.2427 284.251 12.2427 284.771 cv
12.2427 285.191 12.3627 285.511 12.5827 285.751 cv
12.8227 286.011 13.0627 286.131 13.3427 286.131 cv
13.9027 286.111 li
14.2227 286.111 14.4427 286.191 14.6027 286.351 cv
14.7627 286.511 14.8427 286.691 14.8427 286.931 cv
14.8427 287.171 14.7627 287.371 14.6027 287.531 cv
14.4427 287.691 14.2027 287.751 13.9027 287.751 cv
13.3427 287.751 12.8427 287.471 12.3627 286.891 cv
11.9027 286.331 11.6627 285.531 11.6627 284.491 cv
11.6627 283.691 11.8027 283.051 12.0627 282.531 cv
12.2627 282.151 12.5827 281.871 13.0027 281.691 cv
13.2827 281.571 13.8627 281.511 14.7227 281.511 cv
17.7627 281.511 li
18.6227 281.511 19.1427 281.511 19.3227 281.471 cv
19.5227 281.431 19.6427 281.391 19.7027 281.311 cv
19.7827 281.231 19.8027 281.151 19.8027 281.031 cv
19.7427 280.771 li
19.6627 280.631 19.4227 280.371 19.0227 279.971 cv
19.5827 279.971 li
20.5427 280.711 21.0227 281.411 21.0227 282.071 cv
21.0227 282.391 20.9028 282.651 20.7027 282.831 cv
20.5027 283.031 20.1227 283.111 19.5827 283.111 cv
18.9427 283.111 mo
15.5227 283.111 li
15.9227 284.111 16.2027 284.751 16.3627 285.031 cv
16.6427 285.551 16.9427 285.911 17.2627 286.131 cv
17.5827 286.351 17.9227 286.451 18.2827 286.451 cv
18.7627 286.451 19.1427 286.311 19.4627 286.031 cv
19.7827 285.751 19.9227 285.431 19.9227 285.071 cv
19.9227 284.591 19.6027 283.931 18.9427 283.111 cv
f
11.9227 279.771 mo
11.9227 275.551 li
12.2827 275.551 li
12.2827 275.831 li
12.2827 276.091 12.3427 276.291 12.4627 276.411 cv
12.5827 276.551 12.7627 276.611 12.9627 276.611 cv
13.2027 276.611 13.4627 276.551 13.7827 276.411 cv
18.7227 274.331 li
13.5827 272.231 li
13.2227 272.091 12.9627 272.011 12.7627 272.011 cv
12.5227 272.091 li
12.4427 272.171 12.3827 272.251 12.3427 272.371 cv
12.3027 272.491 12.2827 272.711 12.2827 273.031 cv
11.9227 273.031 li
11.9227 270.111 li
12.2827 270.111 li
12.3227 270.471 12.3827 270.691 12.4827 270.811 cv
12.6827 271.051 13.0227 271.271 13.4627 271.431 cv
21.1227 274.611 li
21.1227 275.011 li
13.5827 278.211 li
13.2427 278.351 13.0027 278.491 12.8427 278.611 cv
12.6827 278.751 12.5627 278.911 12.4427 279.111 cv
12.4027 279.231 12.3427 279.451 12.2827 279.771 cv
11.9227 279.771 li
f
15.2827 267.811 mo
16.6227 267.811 17.6627 267.491 18.4027 266.831 cv
19.1627 266.191 19.5427 265.411 19.5427 264.531 cv
19.5427 263.971 19.3827 263.471 19.0627 263.031 cv
18.7427 262.591 18.2027 262.231 17.4027 261.931 cv
17.6027 261.611 li
18.5027 261.771 19.3227 262.171 20.0427 262.811 cv
20.7627 263.471 21.1227 264.291 21.1227 265.291 cv
21.1227 266.371 20.7227 267.291 19.8827 268.051 cv
19.0427 268.811 17.9227 269.191 16.5027 269.191 cv
14.9827 269.191 13.7827 268.811 12.9227 268.011 cv
12.0827 267.231 11.6427 266.251 11.6427 265.051 cv
11.6427 264.051 11.9827 263.231 12.6427 262.591 cv
13.3027 261.951 14.1827 261.611 15.2827 261.611 cv
15.2827 267.811 li
14.7227 267.811 mo
14.7227 263.671 li
14.1627 263.711 13.7427 263.771 13.5027 263.871 cv
13.1427 264.031 12.8627 264.271 12.6627 264.591 cv
12.4627 264.911 12.3427 265.251 12.3427 265.611 cv
12.3427 266.151 12.5627 266.631 12.9827 267.051 cv
13.4027 267.491 13.9827 267.731 14.7227 267.811 cv
f
6.98275 257.351 mo
18.8427 257.351 li
19.4027 257.351 19.7827 257.311 19.9627 257.231 cv
20.1427 257.151 20.2827 257.031 20.3627 256.851 cv
20.4627 256.691 20.5027 256.371 20.5027 255.911 cv
20.8627 255.911 li
20.8627 260.291 li
20.5027 260.291 li
20.5027 259.891 20.4627 259.611 20.3827 259.451 cv
20.3027 259.311 20.1627 259.191 19.9627 259.111 cv
19.7627 259.031 19.4027 258.971 18.8427 258.971 cv
10.7227 258.971 li
9.72275 258.971 9.10275 259.011 8.86275 259.051 cv
8.62275 259.091 8.46275 259.171 8.38275 259.271 cv
8.30275 259.371 8.26275 259.491 8.26275 259.651 cv
8.26275 259.811 8.32275 260.031 8.40275 260.291 cv
8.06275 260.451 li
6.98275 257.791 li
6.98275 257.351 li
f
15.2827 253.371 mo
16.6227 253.371 17.6627 253.051 18.4027 252.391 cv
19.1627 251.751 19.5427 250.971 19.5427 250.091 cv
19.5427 249.531 19.3827 249.031 19.0627 248.591 cv
18.7427 248.151 18.2027 247.791 17.4027 247.491 cv
17.6027 247.171 li
18.5027 247.331 19.3227 247.731 20.0427 248.371 cv
20.7627 249.031 21.1227 249.851 21.1227 250.851 cv
21.1227 251.931 20.7227 252.851 19.8827 253.611 cv
19.0427 254.371 17.9227 254.751 16.5027 254.751 cv
14.9827 254.751 13.7827 254.371 12.9227 253.571 cv
12.0827 252.791 11.6427 251.811 11.6427 250.611 cv
11.6427 249.611 11.9827 248.791 12.6427 248.151 cv
13.3027 247.511 14.1827 247.171 15.2827 247.171 cv
15.2827 253.371 li
14.7227 253.371 mo
14.7227 249.231 li
14.1627 249.271 13.7427 249.331 13.5027 249.431 cv
13.1427 249.591 12.8627 249.831 12.6627 250.151 cv
12.4627 250.471 12.3427 250.811 12.3427 251.171 cv
12.3427 251.711 12.5627 252.191 12.9827 252.611 cv
13.4027 253.051 13.9827 253.291 14.7227 253.371 cv
f
19.8627 239.671 mo
20.3227 240.111 20.6427 240.551 20.8427 240.951 cv
21.0227 241.371 21.1227 241.811 21.1227 242.291 cv
21.1227 243.271 20.7227 244.131 19.9027 244.851 cv
19.1027 245.591 18.0427 245.951 16.7627 245.951 cv
15.4827 245.951 14.3227 245.551 13.2427 244.751 cv
12.1827 243.951 11.6427 242.891 11.6427 241.611 cv
11.6427 240.831 11.9027 240.191 12.4027 239.671 cv
10.7427 239.671 li
9.72275 239.671 9.10275 239.711 8.86275 239.751 cv
8.62275 239.791 8.46275 239.871 8.38275 239.971 cv
8.30275 240.091 8.26275 240.211 8.26275 240.351 cv
8.26275 240.531 8.32275 240.751 8.40275 241.031 cv
8.06275 241.171 li
6.98275 238.491 li
6.98275 238.051 li
17.3227 238.051 li
18.3627 238.051 19.0027 238.031 19.2427 237.991 cv
19.4827 237.951 19.6427 237.871 19.7227 237.751 cv
19.8227 237.651 19.8627 237.531 19.8627 237.371 cv
19.8627 237.211 19.8027 236.971 19.6827 236.671 cv
20.0227 236.571 li
21.1227 239.211 li
21.1227 239.671 li
19.8627 239.671 li
19.1827 239.671 mo
14.5627 239.671 li
14.1227 239.711 13.7227 239.831 13.3627 240.031 cv
13.0027 240.231 12.7227 240.471 12.5227 240.791 cv
12.3427 241.111 12.2427 241.431 12.2427 241.731 cv
12.2427 242.311 12.5027 242.831 13.0227 243.271 cv
13.7027 243.871 14.7027 244.151 15.9827 244.151 cv
17.3027 244.151 18.3227 243.871 19.0227 243.311 cv
19.7227 242.751 20.0627 242.111 20.0627 241.391 cv
20.0627 240.791 19.7827 240.231 19.1827 239.671 cv
f
20.8627 231.271 mo
20.5027 231.271 li
20.5027 230.771 li
20.5027 230.211 20.3227 229.811 19.9627 229.571 cv
19.7627 229.451 19.2827 229.371 18.5227 229.371 cv
9.96275 229.371 li
9.14275 229.371 8.62275 229.471 8.40275 229.631 cv
8.12275 229.891 7.98275 230.271 7.98275 230.771 cv
7.98275 231.271 li
7.62275 231.271 li
7.62275 225.871 li
7.62275 223.911 7.86275 222.411 8.30275 221.371 cv
8.74275 220.331 9.50275 219.511 10.5427 218.871 cv
11.5827 218.251 12.8027 217.931 14.1827 217.931 cv
16.0227 217.931 17.5627 218.491 18.7827 219.611 cv
20.1827 220.871 20.8627 222.791 20.8627 225.351 cv
20.8627 231.271 li
19.9027 227.491 mo
20.1027 226.671 20.1827 225.971 20.1827 225.411 cv
20.1827 223.911 19.6627 222.651 18.6027 221.651 cv
17.5427 220.651 16.1027 220.151 14.2627 220.151 cv
12.4427 220.151 11.0027 220.651 9.94275 221.651 cv
8.90275 222.651 8.36275 223.931 8.36275 225.491 cv
8.36275 226.091 8.46275 226.751 8.64275 227.491 cv
19.9027 227.491 li
f
6.98275 214.271 mo
6.98275 213.991 7.08275 213.771 7.26275 213.571 cv
7.46275 213.391 7.68275 213.291 7.96275 213.291 cv
8.24275 213.291 8.46275 213.391 8.66275 213.571 cv
8.86275 213.771 8.96275 213.991 8.96275 214.271 cv
8.96275 214.551 8.86275 214.771 8.66275 214.971 cv
8.46275 215.171 8.24275 215.271 7.96275 215.271 cv
7.68275 215.271 7.46275 215.191 7.26275 214.991 cv
7.08275 214.791 6.98275 214.551 6.98275 214.271 cv
11.6627 213.451 mo
18.8427 213.451 li
19.4027 213.451 19.7827 213.411 19.9627 213.331 cv
20.1627 213.251 20.3027 213.131 20.3827 212.971 cv
20.4627 212.811 20.5027 212.531 20.5027 212.111 cv
20.8627 212.111 li
20.8627 216.451 li
20.5027 216.451 li
20.5027 216.011 20.4627 215.731 20.3827 215.571 cv
20.3027 215.431 20.1627 215.311 19.9627 215.231 cv
19.7627 215.151 19.4027 215.091 18.8427 215.091 cv
15.4027 215.091 li
14.4427 215.091 13.8027 215.131 13.5027 215.171 cv
13.3027 215.211 13.1627 215.291 13.0827 215.391 cv
13.0027 215.491 12.9427 215.631 12.9427 215.791 cv
12.9427 215.971 13.0027 216.191 13.1027 216.451 cv
12.7427 216.591 li
11.6627 213.891 li
11.6627 213.451 li
f
11.6627 205.211 mo
14.7027 205.211 li
14.7027 205.531 li
13.7427 205.771 13.1027 206.091 12.7427 206.471 cv
12.4027 206.871 12.2227 207.351 12.2227 207.951 cv
12.2227 208.431 12.3427 208.791 12.5827 209.071 cv
12.8227 209.351 13.1027 209.491 13.3827 209.491 cv
13.7627 209.491 14.0827 209.391 14.3227 209.171 cv
14.6027 208.971 14.8827 208.571 15.1827 207.931 cv
15.8627 206.511 li
16.5227 205.191 17.3827 204.531 18.4227 204.531 cv
19.2427 204.531 19.9027 204.851 20.3827 205.451 cv
20.8627 206.071 21.1227 206.751 21.1227 207.511 cv
21.1227 208.071 21.0227 208.691 20.8427 209.391 cv
20.7827 209.611 20.7427 209.791 20.7427 209.931 cv
20.7427 210.091 20.8227 210.191 20.9827 210.271 cv
20.9827 210.591 li
17.8027 210.591 li
17.8027 210.271 li
18.7227 210.091 19.4227 209.751 19.8827 209.231 cv
20.3427 208.711 20.5627 208.131 20.5627 207.491 cv
20.5627 207.051 20.4427 206.691 20.1627 206.411 cv
19.9027 206.131 19.5827 205.971 19.2027 205.971 cv
18.7627 205.971 18.4027 206.131 18.0827 206.451 cv
17.7827 206.771 17.4027 207.411 16.9227 208.351 cv
16.4627 209.291 16.0427 209.911 15.6427 210.191 cv
15.2827 210.491 14.8027 210.631 14.2427 210.631 cv
13.5227 210.631 12.9027 210.391 12.4027 209.871 cv
11.9227 209.371 11.6627 208.711 11.6627 207.911 cv
11.6627 207.571 11.7427 207.151 11.8827 206.631 cv
11.9827 206.311 12.0227 206.091 12.0227 205.971 cv
12.0227 205.871 12.0027 205.791 11.9627 205.731 cv
11.9227 205.691 11.8227 205.611 11.6627 205.531 cv
11.6627 205.211 li
f
8.98275 200.611 mo
11.9227 200.611 li
11.9227 198.511 li
12.6027 198.511 li
12.6027 200.611 li
18.4027 200.611 li
18.9827 200.611 19.3827 200.531 19.5827 200.371 cv
19.7827 200.211 19.8827 199.991 19.8827 199.711 cv
19.8827 199.511 19.8227 199.291 19.6827 199.091 cv
19.5627 198.891 19.3627 198.751 19.0827 198.631 cv
19.0827 198.251 li
19.7227 198.491 20.2027 198.811 20.5227 199.211 cv
20.8427 199.631 20.9827 200.051 20.9827 200.491 cv
20.9827 200.811 20.9028 201.111 20.7427 201.391 cv
20.5827 201.671 20.3627 201.891 20.0427 202.011 cv
19.7427 202.151 19.2627 202.211 18.6227 202.211 cv
12.6027 202.211 li
12.6027 203.631 li
12.2827 203.631 li
12.1427 203.271 11.9027 202.911 11.5627 202.531 cv
11.2227 202.171 10.8227 201.831 10.3427 201.531 cv
10.1027 201.391 9.64275 201.191 8.98275 200.911 cv
8.98275 200.611 li
f
19.5827 192.571 mo
20.3027 193.491 20.7027 194.071 20.8027 194.311 cv
20.9427 194.671 21.0227 195.031 21.0227 195.431 cv
21.0227 196.051 20.8227 196.551 20.4027 196.951 cv
20.0027 197.351 19.4427 197.551 18.7427 197.551 cv
18.3027 197.551 17.9227 197.471 17.6027 197.271 cv
17.1627 197.011 16.7627 196.551 16.3627 195.891 cv
15.9827 195.231 15.5027 194.131 14.9427 192.571 cv
14.5827 192.571 li
13.7027 192.571 13.0827 192.731 12.7427 193.011 cv
12.4227 193.291 12.2427 193.711 12.2427 194.231 cv
12.2427 194.651 12.3627 194.971 12.5827 195.211 cv
12.8227 195.471 13.0627 195.591 13.3427 195.591 cv
13.9027 195.571 li
14.2227 195.571 14.4427 195.651 14.6027 195.811 cv
14.7627 195.971 14.8427 196.151 14.8427 196.391 cv
14.8427 196.631 14.7627 196.831 14.6027 196.991 cv
14.4427 197.151 14.2027 197.211 13.9027 197.211 cv
13.3427 197.211 12.8427 196.931 12.3627 196.351 cv
11.9027 195.791 11.6627 194.991 11.6627 193.951 cv
11.6627 193.151 11.8027 192.511 12.0627 191.991 cv
12.2627 191.611 12.5827 191.331 13.0027 191.151 cv
13.2827 191.031 13.8627 190.971 14.7227 190.971 cv
17.7627 190.971 li
18.6227 190.971 19.1427 190.971 19.3227 190.931 cv
19.5227 190.891 19.6427 190.851 19.7027 190.771 cv
19.7827 190.691 19.8027 190.611 19.8027 190.491 cv
19.7427 190.231 li
19.6627 190.091 19.4227 189.831 19.0227 189.431 cv
19.5827 189.431 li
20.5427 190.171 21.0227 190.871 21.0227 191.531 cv
21.0227 191.851 20.9028 192.111 20.7027 192.291 cv
20.5027 192.491 20.1227 192.571 19.5827 192.571 cv
18.9427 192.571 mo
15.5227 192.571 li
15.9227 193.571 16.2027 194.211 16.3627 194.491 cv
16.6427 195.011 16.9427 195.371 17.2627 195.591 cv
17.5827 195.811 17.9227 195.911 18.2827 195.911 cv
18.7627 195.911 19.1427 195.771 19.4627 195.491 cv
19.7827 195.211 19.9227 194.891 19.9227 194.531 cv
19.9227 194.051 19.6027 193.391 18.9427 192.571 cv
f
13.5427 186.151 mo
12.3027 185.111 11.6627 184.111 11.6627 183.151 cv
11.6627 182.671 11.7827 182.271 12.0227 181.911 cv
12.2627 181.551 12.6627 181.271 13.2227 181.051 cv
13.6227 180.931 14.2227 180.851 15.0227 180.851 cv
18.8427 180.851 li
19.4027 180.851 19.8027 180.811 20.0027 180.711 cv
20.1627 180.651 20.3027 180.531 20.3827 180.371 cv
20.4627 180.211 20.5027 179.911 20.5027 179.471 cv
20.8627 179.471 li
20.8627 183.911 li
20.5027 183.911 li
20.5027 183.711 li
20.5027 183.311 20.4427 183.011 20.3227 182.851 cv
20.2027 182.691 20.0027 182.571 19.7627 182.491 cv
19.6627 182.471 19.3627 182.451 18.8427 182.451 cv
15.1827 182.451 li
14.3827 182.451 13.7827 182.571 13.4227 182.771 cv
13.0627 182.991 12.8627 183.351 12.8627 183.851 cv
12.8627 184.631 13.2827 185.391 14.1227 186.151 cv
18.8427 186.151 li
19.4427 186.151 19.8227 186.131 19.9627 186.051 cv
20.1627 185.971 20.3027 185.831 20.3827 185.671 cv
20.4627 185.511 20.5027 185.191 20.5027 184.711 cv
20.8627 184.711 li
20.8627 189.131 li
20.5027 189.131 li
20.5027 188.931 li
20.5027 188.491 20.4027 188.171 20.1627 188.011 cv
19.9427 187.851 19.5027 187.771 18.8427 187.771 cv
15.5227 187.771 li
14.4427 187.771 13.8027 187.811 13.5627 187.851 cv
13.3227 187.891 13.1627 187.971 13.0827 188.071 cv
13.0027 188.171 12.9427 188.311 12.9427 188.471 cv
12.9427 188.671 13.0027 188.891 13.1027 189.131 cv
12.7427 189.271 li
11.6627 186.571 li
11.6627 186.151 li
13.5427 186.151 li
f
17.4627 171.171 mo
18.6427 171.411 19.5427 171.891 20.1827 172.591 cv
20.8227 173.291 21.1227 174.071 21.1227 174.911 cv
21.1227 175.951 20.7027 176.831 19.8627 177.591 cv
19.0227 178.351 17.8627 178.711 16.4027 178.711 cv
15.0027 178.711 13.8627 178.291 12.9827 177.451 cv
12.1027 176.611 11.6627 175.611 11.6627 174.431 cv
11.6627 173.571 11.9027 172.851 12.3627 172.291 cv
12.8227 171.731 13.3027 171.431 13.8027 171.431 cv
14.0627 171.431 14.2627 171.511 14.4027 171.671 cv
14.5627 171.831 14.6227 172.051 14.6227 172.331 cv
14.6227 172.731 14.5027 173.011 14.2627 173.191 cv
14.1427 173.311 13.8827 173.391 13.4827 173.431 cv
13.1027 173.471 12.8027 173.591 12.6027 173.811 cv
12.4027 174.051 12.3027 174.371 12.3027 174.771 cv
12.3027 175.411 12.5427 175.931 13.0227 176.331 cv
13.6627 176.871 14.5227 177.131 15.5627 177.131 cv
16.6427 177.131 17.5827 176.871 18.3827 176.351 cv
19.2027 175.831 19.6027 175.111 19.6027 174.211 cv
19.6027 173.571 19.4027 173.011 18.9627 172.491 cv
18.6627 172.131 18.1227 171.791 17.3227 171.451 cv
17.4627 171.171 li
f
15.2827 168.391 mo
16.6227 168.391 17.6627 168.071 18.4027 167.411 cv
19.1627 166.771 19.5427 165.991 19.5427 165.111 cv
19.5427 164.551 19.3827 164.051 19.0627 163.611 cv
18.7427 163.171 18.2027 162.811 17.4027 162.511 cv
17.6027 162.191 li
18.5027 162.351 19.3227 162.751 20.0427 163.391 cv
20.7627 164.051 21.1227 164.871 21.1227 165.871 cv
21.1227 166.951 20.7227 167.871 19.8827 168.631 cv
19.0427 169.391 17.9227 169.771 16.5027 169.771 cv
14.9827 169.771 13.7827 169.391 12.9227 168.591 cv
12.0827 167.811 11.6427 166.831 11.6427 165.631 cv
11.6427 164.631 11.9827 163.811 12.6427 163.171 cv
13.3027 162.531 14.1827 162.191 15.2827 162.191 cv
15.2827 168.391 li
14.7227 168.391 mo
14.7227 164.251 li
14.1627 164.291 13.7427 164.351 13.5027 164.451 cv
13.1427 164.611 12.8627 164.851 12.6627 165.171 cv
12.4627 165.491 12.3427 165.831 12.3427 166.191 cv
12.3427 166.731 12.5627 167.211 12.9827 167.631 cv
13.4027 168.071 13.9827 168.311 14.7227 168.391 cv
f
24.7627 155.411 mo
25.1227 155.411 li
24.6227 156.411 24.0427 157.231 23.3827 157.871 cv
22.4227 158.831 21.3228 159.551 20.0627 160.051 cv
18.7827 160.571 17.4627 160.811 16.0627 160.811 cv
14.0627 160.811 12.2227 160.331 10.5427 159.331 cv
8.88275 158.331 7.70275 157.031 6.98275 155.411 cv
7.38275 155.411 li
7.82275 156.231 8.44275 156.891 9.20275 157.411 cv
9.98275 157.931 10.9627 158.311 12.1227 158.551 cv
13.3027 158.811 14.5427 158.931 15.8227 158.931 cv
17.2227 158.931 18.4827 158.831 19.6027 158.611 cv
20.5027 158.451 21.2027 158.231 21.7427 157.991 cv
22.2827 157.751 22.8027 157.431 23.3228 157.031 cv
23.8228 156.631 24.3027 156.091 24.7627 155.411 cv
f
13.5627 151.691 mo
12.9227 151.051 12.5427 150.651 12.4427 150.531 cv
12.2027 150.251 12.0027 149.931 11.8627 149.591 cv
11.7427 149.271 11.6627 148.931 11.6627 148.591 cv
11.6627 148.031 11.8227 147.551 12.1427 147.151 cv
12.4627 146.751 12.9427 146.471 13.5627 146.331 cv
12.7827 145.671 12.2627 145.111 12.0227 144.631 cv
11.7827 144.171 11.6627 143.691 11.6627 143.211 cv
11.6627 142.731 11.7827 142.311 12.0227 141.951 cv
12.2627 141.591 12.6627 141.291 13.2227 141.071 cv
13.6027 140.931 14.2027 140.851 15.0027 140.851 cv
18.8427 140.851 li
19.4027 140.851 19.8027 140.811 20.0027 140.731 cv
20.1427 140.671 20.2627 140.551 20.3627 140.371 cv
20.4627 140.191 20.5027 139.911 20.5027 139.511 cv
20.8627 139.511 li
20.8627 143.911 li
20.5027 143.911 li
20.5027 143.731 li
20.5027 143.351 20.4427 143.051 20.2827 142.831 cv
20.1827 142.691 20.0227 142.591 19.7827 142.511 cv
19.6827 142.491 19.3627 142.471 18.8427 142.471 cv
15.0027 142.471 li
14.2827 142.471 13.7627 142.571 13.4427 142.731 cv
13.0427 142.991 12.8227 143.391 12.8227 143.951 cv
12.8227 144.311 12.9227 144.651 13.0827 144.991 cv
13.2627 145.351 13.5827 145.771 14.0427 146.251 cv
14.1627 146.271 li
14.5827 146.251 li
18.8427 146.251 li
19.4627 146.251 19.8427 146.231 19.9827 146.151 cv
20.1427 146.091 20.2627 145.971 20.3627 145.771 cv
20.4627 145.591 20.5027 145.271 20.5027 144.811 cv
20.8627 144.811 li
20.8627 149.331 li
20.5027 149.331 li
20.5027 148.851 20.4627 148.511 20.3427 148.311 cv
20.2227 148.131 20.0427 147.991 19.8027 147.911 cv
19.7027 147.891 19.3827 147.871 18.8427 147.871 cv
15.0027 147.871 li
14.2827 147.871 13.7427 147.991 13.4227 148.191 cv
13.0227 148.491 12.8027 148.891 12.8027 149.391 cv
12.8027 149.751 12.9027 150.111 13.0827 150.431 cv
13.3627 150.991 13.6827 151.411 14.0427 151.691 cv
18.8427 151.691 li
19.4427 151.691 19.8227 151.651 19.9827 151.571 cv
20.1627 151.491 20.3027 151.371 20.3827 151.211 cv
20.4627 151.051 20.5027 150.731 20.5027 150.231 cv
20.8627 150.231 li
20.8627 154.651 li
20.5027 154.651 li
20.5027 154.251 20.4627 153.971 20.3827 153.811 cv
20.3027 153.651 20.1627 153.511 19.9627 153.431 cv
19.7627 153.351 19.4027 153.311 18.8427 153.311 cv
15.4227 153.311 li
14.4427 153.311 13.8027 153.351 13.5227 153.391 cv
13.3227 153.431 13.1627 153.511 13.0827 153.611 cv
13.0027 153.711 12.9427 153.851 12.9427 154.011 cv
12.9427 154.191 13.0027 154.411 13.1027 154.651 cv
12.7427 154.811 li
11.6627 152.111 li
11.6627 151.691 li
13.5627 151.691 li
f
7.38275 138.971 mo
6.98275 138.971 li
7.46275 137.971 8.04275 137.151 8.70275 136.491 cv
9.66275 135.571 10.7627 134.851 12.0427 134.331 cv
13.3227 133.831 14.6627 133.571 16.0427 133.571 cv
18.0827 133.571 19.9227 134.071 21.5627 135.071 cv
23.2027 136.071 24.4028 137.371 25.1227 138.971 cv
24.7627 138.971 li
24.3027 138.171 23.6827 137.511 22.9227 136.991 cv
22.1627 136.471 21.1827 136.091 20.0227 135.831 cv
18.8627 135.591 17.6227 135.451 16.3427 135.451 cv
14.9627 135.451 13.7027 135.571 12.5427 135.771 cv
11.6627 135.951 10.9427 136.151 10.4027 136.391 cv
9.86275 136.631 9.34275 136.971 8.82275 137.371 cv
8.32275 137.771 7.84275 138.311 7.38275 138.971 cv
f
2 lc
0 lj
66.144 426.302 mo
66.144 14.1737 li
@
529.152 426.302 mo
529.152 14.1737 li
@
66.144 426.302 mo
529.152 426.302 li
@
66.144 14.1737 mo
529.152 14.1737 li
@
100.141 216.454 mo
99.3814 218.114 li
95.4014 218.114 li
94.5214 219.894 li
96.2414 220.154 97.6214 220.794 98.6214 221.814 cv
99.4814 222.694 99.9214 223.734 99.9214 224.934 cv
99.9214 225.634 99.7814 226.274 99.5014 226.874 cv
99.2214 227.474 98.8614 227.974 98.4214 228.394 cv
97.9814 228.814 97.5214 229.154 97.0014 229.394 cv
96.2414 229.734 95.4814 229.914 94.7014 229.914 cv
93.9014 229.914 93.3214 229.774 92.9614 229.514 cv
92.6014 229.254 92.4214 228.954 92.4214 228.634 cv
92.4214 228.454 92.4814 228.294 92.6414 228.154 cv
92.7814 228.014 92.9614 227.934 93.2014 227.934 cv
93.3614 227.934 93.5214 227.974 93.6414 228.014 cv
93.7614 228.074 93.9814 228.214 94.3014 228.414 cv
94.7814 228.754 95.2814 228.914 95.7814 228.914 cv
96.5414 228.914 97.2014 228.634 97.7814 228.054 cv
98.3614 227.494 98.6614 226.794 98.6614 225.954 cv
98.6614 225.154 98.4014 224.414 97.8814 223.714 cv
97.3614 223.034 96.6614 222.494 95.7614 222.114 cv
95.0414 221.834 94.0814 221.654 92.8614 221.594 cv
95.4014 216.454 li
100.141 216.454 li
f
110.421 216.174 mo
110.421 216.534 li
109.561 216.634 108.861 216.814 108.321 217.054 cv
107.761 217.314 107.221 217.714 106.701 218.234 cv
106.181 218.754 105.741 219.354 105.381 219.994 cv
105.021 220.634 104.741 221.414 104.521 222.294 cv
105.441 221.654 106.381 221.334 107.341 221.334 cv
108.241 221.334 109.021 221.714 109.681 222.434 cv
110.341 223.154 110.681 224.094 110.681 225.234 cv
110.681 226.354 110.341 227.354 109.681 228.274 cv
108.881 229.374 107.801 229.914 106.481 229.914 cv
105.561 229.914 104.801 229.634 104.181 229.034 cv
102.941 227.874 102.321 226.354 102.321 224.494 cv
102.321 223.314 102.541 222.194 103.021 221.114 cv
103.501 220.054 104.181 219.114 105.061 218.274 cv
105.941 217.454 106.801 216.894 107.601 216.614 cv
108.401 216.334 109.161 216.174 109.861 216.174 cv
110.421 216.174 li
104.361 223.014 mo
104.241 223.894 104.181 224.614 104.181 225.134 cv
104.181 225.774 104.281 226.454 104.521 227.174 cv
104.741 227.914 105.081 228.494 105.561 228.914 cv
105.881 229.234 106.281 229.374 106.761 229.374 cv
107.321 229.374 107.841 229.114 108.281 228.574 cv
108.721 228.054 108.961 227.294 108.961 226.294 cv
108.961 225.194 108.721 224.234 108.281 223.414 cv
107.841 222.614 107.201 222.194 106.401 222.194 cv
106.161 222.194 105.881 222.254 105.601 222.354 cv
105.321 222.454 104.901 222.674 104.361 223.014 cv
f
113.961 227.794 mo
114.261 227.794 114.521 227.914 114.721 228.114 cv
114.921 228.334 115.041 228.594 115.041 228.874 cv
115.041 229.194 114.921 229.454 114.721 229.654 cv
114.501 229.854 114.241 229.954 113.961 229.954 cv
113.661 229.954 113.401 229.854 113.201 229.654 cv
112.981 229.454 112.881 229.194 112.881 228.874 cv
112.881 228.594 112.981 228.334 113.201 228.114 cv
113.401 227.914 113.661 227.794 113.961 227.794 cv
f
117.181 223.154 mo
117.181 221.654 117.401 220.354 117.861 219.254 cv
118.301 218.174 118.921 217.354 119.681 216.814 cv
120.261 216.394 120.861 216.174 121.501 216.174 cv
122.501 216.174 123.421 216.694 124.241 217.734 cv
125.241 219.014 125.741 220.754 125.741 222.954 cv
125.741 224.494 125.521 225.794 125.081 226.874 cv
124.641 227.954 124.061 228.714 123.381 229.194 cv
122.701 229.674 122.041 229.914 121.401 229.914 cv
120.121 229.914 119.081 229.174 118.241 227.694 cv
117.521 226.454 117.181 224.934 117.181 223.154 cv
119.101 223.394 mo
119.101 225.234 119.321 226.714 119.781 227.854 cv
120.141 228.834 120.681 229.314 121.441 229.314 cv
121.781 229.314 122.141 229.174 122.521 228.854 cv
122.901 228.534 123.181 228.014 123.381 227.254 cv
123.681 226.134 123.841 224.554 123.841 222.514 cv
123.841 221.014 123.681 219.754 123.361 218.734 cv
123.121 217.994 122.821 217.474 122.461 217.154 cv
122.181 216.934 121.861 216.814 121.481 216.814 cv
121.041 216.814 120.641 217.014 120.301 217.414 cv
119.821 217.974 119.501 218.814 119.341 219.974 cv
119.181 221.134 119.101 222.274 119.101 223.394 cv
f
254.725 127.805 mo
254.505 127.565 254.245 127.185 253.945 126.625 cv
253.505 127.425 253.085 127.985 252.705 128.305 cv
252.225 128.745 251.605 128.945 250.865 128.945 cv
249.985 128.945 249.245 128.625 248.665 127.945 cv
248.045 127.265 247.745 126.365 247.745 125.205 cv
247.745 124.125 248.045 123.205 248.665 122.445 cv
249.205 121.805 249.945 121.465 250.885 121.465 cv
251.345 121.465 251.765 121.565 252.125 121.765 cv
252.525 121.985 252.865 122.285 253.145 122.645 cv
253.405 122.985 253.665 123.365 253.945 123.805 cv
254.365 123.045 254.765 122.485 255.165 122.125 cv
255.645 121.725 256.245 121.505 257.005 121.505 cv
257.885 121.505 258.605 121.845 259.205 122.485 cv
259.805 123.185 260.125 124.105 260.125 125.225 cv
260.125 126.325 259.805 127.245 259.205 127.985 cv
258.645 128.645 257.905 128.965 256.985 128.965 cv
256.505 128.965 256.105 128.885 255.745 128.685 cv
255.385 128.505 255.045 128.205 254.725 127.805 cv
250.745 127.665 mo
251.825 127.665 252.685 126.885 253.325 125.325 cv
252.485 123.625 251.625 122.765 250.745 122.765 cv
250.085 122.765 249.605 123.005 249.285 123.465 cv
248.925 123.965 248.745 124.545 248.745 125.205 cv
248.745 125.945 248.925 126.545 249.285 126.985 cv
249.645 127.445 250.125 127.665 250.745 127.665 cv
257.125 122.785 mo
256.145 122.785 255.285 123.565 254.545 125.125 cv
255.345 126.845 256.205 127.685 257.125 127.685 cv
257.765 127.685 258.265 127.465 258.585 126.985 cv
258.945 126.485 259.125 125.905 259.125 125.225 cv
259.125 124.505 258.945 123.905 258.585 123.465 cv
258.225 123.025 257.725 122.785 257.125 122.785 cv
f
390.428 213.363 mo
389.669 215.023 li
385.689 215.023 li
384.809 216.803 li
386.529 217.063 387.909 217.703 388.909 218.723 cv
389.768 219.603 390.208 220.643 390.208 221.843 cv
390.208 222.543 390.069 223.183 389.789 223.783 cv
389.509 224.383 389.148 224.883 388.708 225.303 cv
388.268 225.723 387.809 226.063 387.289 226.303 cv
386.529 226.643 385.768 226.823 384.988 226.823 cv
384.189 226.823 383.608 226.683 383.249 226.423 cv
382.889 226.163 382.708 225.863 382.708 225.543 cv
382.708 225.363 382.768 225.203 382.928 225.063 cv
383.069 224.923 383.249 224.843 383.488 224.843 cv
383.648 224.843 383.809 224.883 383.928 224.923 cv
384.048 224.983 384.268 225.123 384.589 225.323 cv
385.069 225.663 385.569 225.823 386.069 225.823 cv
386.828 225.823 387.488 225.543 388.069 224.963 cv
388.648 224.403 388.949 223.703 388.949 222.863 cv
388.949 222.063 388.689 221.323 388.169 220.623 cv
387.648 219.943 386.949 219.403 386.048 219.023 cv
385.328 218.743 384.368 218.563 383.148 218.503 cv
385.689 213.363 li
390.428 213.363 li
f
400.708 213.083 mo
400.708 213.443 li
399.849 213.543 399.148 213.723 398.609 213.963 cv
398.048 214.223 397.509 214.623 396.988 215.143 cv
396.469 215.663 396.029 216.263 395.669 216.903 cv
395.309 217.543 395.029 218.323 394.809 219.203 cv
395.729 218.563 396.669 218.243 397.629 218.243 cv
398.529 218.243 399.309 218.623 399.969 219.343 cv
400.629 220.063 400.969 221.003 400.969 222.143 cv
400.969 223.263 400.629 224.263 399.969 225.183 cv
399.169 226.283 398.089 226.823 396.768 226.823 cv
395.849 226.823 395.089 226.543 394.469 225.943 cv
393.229 224.783 392.608 223.263 392.608 221.403 cv
392.608 220.223 392.828 219.103 393.309 218.023 cv
393.789 216.963 394.469 216.023 395.349 215.183 cv
396.229 214.363 397.089 213.803 397.889 213.523 cv
398.689 213.243 399.449 213.083 400.148 213.083 cv
400.708 213.083 li
394.648 219.923 mo
394.529 220.803 394.469 221.523 394.469 222.043 cv
394.469 222.683 394.569 223.363 394.809 224.083 cv
395.029 224.823 395.368 225.403 395.849 225.823 cv
396.169 226.143 396.569 226.283 397.048 226.283 cv
397.609 226.283 398.129 226.023 398.569 225.483 cv
399.009 224.963 399.249 224.203 399.249 223.203 cv
399.249 222.103 399.009 221.143 398.569 220.323 cv
398.129 219.523 397.488 219.103 396.689 219.103 cv
396.449 219.103 396.169 219.163 395.889 219.263 cv
395.608 219.363 395.189 219.583 394.648 219.923 cv
f
404.249 224.703 mo
404.548 224.703 404.809 224.823 405.009 225.023 cv
405.208 225.243 405.328 225.503 405.328 225.783 cv
405.328 226.103 405.208 226.363 405.009 226.563 cv
404.789 226.763 404.529 226.863 404.249 226.863 cv
403.949 226.863 403.689 226.763 403.488 226.563 cv
403.268 226.363 403.169 226.103 403.169 225.783 cv
403.169 225.503 403.268 225.243 403.488 225.023 cv
403.689 224.823 403.949 224.703 404.249 224.703 cv
f
407.809 226.863 mo
407.809 226.523 li
408.648 226.523 409.428 226.323 410.169 225.923 cv
410.889 225.543 411.608 224.883 412.289 223.923 cv
412.969 222.983 413.428 221.943 413.708 220.783 cv
412.669 221.463 411.749 221.783 410.928 221.783 cv
409.988 221.783 409.189 221.423 408.529 220.703 cv
407.868 219.983 407.548 219.043 407.548 217.843 cv
407.548 216.683 407.868 215.663 408.529 214.743 cv
409.328 213.643 410.368 213.083 411.669 213.083 cv
412.749 213.083 413.689 213.543 414.469 214.443 cv
415.409 215.563 415.889 216.923 415.889 218.563 cv
415.889 220.043 415.529 221.403 414.809 222.683 cv
414.089 223.963 413.069 225.003 411.789 225.843 cv
410.729 226.523 409.589 226.863 408.368 226.863 cv
407.809 226.863 li
413.849 220.063 mo
413.969 219.223 414.029 218.563 414.029 218.043 cv
414.029 217.403 413.909 216.723 413.708 216.003 cv
413.488 215.283 413.189 214.723 412.789 214.323 cv
412.389 213.923 411.949 213.723 411.449 213.723 cv
410.868 213.723 410.368 213.983 409.928 214.503 cv
409.488 215.023 409.268 215.803 409.268 216.823 cv
409.268 218.203 409.548 219.283 410.148 220.043 cv
410.569 220.603 411.089 220.883 411.708 220.883 cv
412.009 220.883 412.368 220.823 412.768 220.683 cv
413.169 220.543 413.529 220.343 413.849 220.063 cv
f
143.684 214.05 mo
142.924 215.71 li
138.944 215.71 li
138.064 217.49 li
139.784 217.75 141.164 218.39 142.164 219.41 cv
143.024 220.29 143.464 221.33 143.464 222.53 cv
143.464 223.23 143.324 223.87 143.044 224.47 cv
142.764 225.07 142.404 225.57 141.964 225.99 cv
141.524 226.41 141.064 226.75 140.544 226.99 cv
139.784 227.33 139.024 227.51 138.244 227.51 cv
137.444 227.51 136.864 227.37 136.504 227.11 cv
136.144 226.85 135.964 226.55 135.964 226.23 cv
135.964 226.05 136.024 225.89 136.184 225.75 cv
136.324 225.61 136.504 225.53 136.744 225.53 cv
136.904 225.53 137.064 225.57 137.184 225.61 cv
137.304 225.67 137.524 225.81 137.844 226.01 cv
138.324 226.35 138.824 226.51 139.324 226.51 cv
140.084 226.51 140.744 226.23 141.324 225.65 cv
141.904 225.09 142.204 224.39 142.204 223.55 cv
142.204 222.75 141.944 222.01 141.424 221.31 cv
140.904 220.63 140.204 220.09 139.304 219.71 cv
138.584 219.43 137.624 219.25 136.404 219.19 cv
138.944 214.05 li
143.684 214.05 li
f
153.964 213.77 mo
153.964 214.13 li
153.104 214.23 152.404 214.41 151.864 214.65 cv
151.304 214.91 150.764 215.31 150.244 215.83 cv
149.724 216.35 149.284 216.95 148.924 217.59 cv
148.564 218.23 148.284 219.01 148.064 219.89 cv
148.984 219.25 149.924 218.93 150.884 218.93 cv
151.784 218.93 152.564 219.31 153.224 220.03 cv
153.884 220.75 154.224 221.69 154.224 222.83 cv
154.224 223.95 153.884 224.95 153.224 225.87 cv
152.424 226.97 151.344 227.51 150.024 227.51 cv
149.104 227.51 148.344 227.23 147.724 226.63 cv
146.484 225.47 145.864 223.95 145.864 222.09 cv
145.864 220.91 146.084 219.79 146.564 218.71 cv
147.044 217.65 147.724 216.71 148.604 215.87 cv
149.484 215.05 150.344 214.49 151.144 214.21 cv
151.944 213.93 152.704 213.77 153.404 213.77 cv
153.964 213.77 li
147.904 220.61 mo
147.784 221.49 147.724 222.21 147.724 222.73 cv
147.724 223.37 147.824 224.05 148.064 224.77 cv
148.284 225.51 148.624 226.09 149.104 226.51 cv
149.424 226.83 149.824 226.97 150.304 226.97 cv
150.864 226.97 151.384 226.71 151.824 226.17 cv
152.264 225.65 152.504 224.89 152.504 223.89 cv
152.504 222.79 152.264 221.83 151.824 221.01 cv
151.384 220.21 150.744 219.79 149.944 219.79 cv
149.704 219.79 149.424 219.85 149.144 219.95 cv
148.864 220.05 148.444 220.27 147.904 220.61 cv
f
157.504 225.39 mo
157.804 225.39 158.064 225.51 158.264 225.71 cv
158.464 225.93 158.584 226.19 158.584 226.47 cv
158.584 226.79 158.464 227.05 158.264 227.25 cv
158.044 227.45 157.784 227.55 157.504 227.55 cv
157.204 227.55 156.944 227.45 156.744 227.25 cv
156.524 227.05 156.424 226.79 156.424 226.47 cv
156.424 226.19 156.524 225.93 156.744 225.71 cv
156.944 225.51 157.204 225.39 157.504 225.39 cv
f
162.024 214.05 mo
169.124 214.05 li
169.124 214.41 li
164.704 227.55 li
163.604 227.55 li
167.564 215.63 li
163.924 215.63 li
163.184 215.63 162.664 215.73 162.344 215.91 cv
161.784 216.21 161.344 216.67 161.024 217.29 cv
160.744 217.19 li
162.024 214.05 li
f
298.268 127.805 mo
298.048 127.565 297.788 127.185 297.488 126.625 cv
297.048 127.425 296.628 127.985 296.248 128.305 cv
295.768 128.745 295.148 128.945 294.408 128.945 cv
293.528 128.945 292.788 128.625 292.208 127.945 cv
291.588 127.265 291.288 126.365 291.288 125.205 cv
291.288 124.125 291.588 123.205 292.208 122.445 cv
292.748 121.805 293.488 121.465 294.428 121.465 cv
294.888 121.465 295.308 121.565 295.668 121.765 cv
296.068 121.985 296.408 122.285 296.688 122.645 cv
296.948 122.985 297.208 123.365 297.488 123.805 cv
297.908 123.045 298.308 122.485 298.708 122.125 cv
299.188 121.725 299.788 121.505 300.548 121.505 cv
301.428 121.505 302.148 121.845 302.748 122.485 cv
303.348 123.185 303.668 124.105 303.668 125.225 cv
303.668 126.325 303.348 127.245 302.748 127.985 cv
302.188 128.645 301.448 128.965 300.528 128.965 cv
300.048 128.965 299.648 128.885 299.288 128.685 cv
298.928 128.505 298.588 128.205 298.268 127.805 cv
294.288 127.665 mo
295.368 127.665 296.228 126.885 296.868 125.325 cv
296.028 123.625 295.168 122.765 294.288 122.765 cv
293.628 122.765 293.148 123.005 292.828 123.465 cv
292.468 123.965 292.288 124.545 292.288 125.205 cv
292.288 125.945 292.468 126.545 292.828 126.985 cv
293.188 127.445 293.668 127.665 294.288 127.665 cv
300.668 122.785 mo
299.688 122.785 298.828 123.565 298.088 125.125 cv
298.888 126.845 299.748 127.685 300.668 127.685 cv
301.308 127.685 301.808 127.465 302.128 126.985 cv
302.488 126.485 302.668 125.905 302.668 125.225 cv
302.668 124.505 302.488 123.905 302.128 123.465 cv
301.768 123.025 301.268 122.785 300.668 122.785 cv
f
433.972 210.959 mo
433.212 212.619 li
429.232 212.619 li
428.352 214.399 li
430.072 214.659 431.452 215.299 432.452 216.319 cv
433.312 217.199 433.752 218.239 433.752 219.439 cv
433.752 220.139 433.612 220.779 433.332 221.379 cv
433.052 221.979 432.692 222.479 432.252 222.899 cv
431.812 223.319 431.352 223.659 430.832 223.899 cv
430.072 224.239 429.312 224.419 428.532 224.419 cv
427.732 224.419 427.152 224.279 426.792 224.019 cv
426.432 223.759 426.252 223.459 426.252 223.139 cv
426.252 222.959 426.312 222.799 426.472 222.659 cv
426.612 222.519 426.792 222.439 427.032 222.439 cv
427.192 222.439 427.352 222.479 427.472 222.519 cv
427.592 222.579 427.812 222.719 428.132 222.919 cv
428.612 223.259 429.112 223.419 429.612 223.419 cv
430.372 223.419 431.032 223.139 431.612 222.559 cv
432.192 221.999 432.492 221.299 432.492 220.459 cv
432.492 219.659 432.232 218.919 431.712 218.219 cv
431.192 217.539 430.492 216.999 429.592 216.619 cv
428.872 216.339 427.912 216.159 426.692 216.099 cv
429.232 210.959 li
433.972 210.959 li
f
437.312 210.959 mo
444.412 210.959 li
444.412 211.319 li
439.992 224.459 li
438.892 224.459 li
442.852 212.539 li
439.212 212.539 li
438.472 212.539 437.952 212.639 437.632 212.819 cv
437.072 213.119 436.632 213.579 436.312 214.199 cv
436.032 214.099 li
437.312 210.959 li
f
447.792 222.299 mo
448.092 222.299 448.352 222.419 448.552 222.619 cv
448.752 222.839 448.872 223.099 448.872 223.379 cv
448.872 223.699 448.752 223.959 448.552 224.159 cv
448.332 224.359 448.072 224.459 447.792 224.459 cv
447.492 224.459 447.232 224.359 447.032 224.159 cv
446.812 223.959 446.712 223.699 446.712 223.379 cv
446.712 223.099 446.812 222.839 447.032 222.619 cv
447.232 222.419 447.492 222.299 447.792 222.299 cv
f
459.252 210.679 mo
459.252 211.039 li
458.392 211.139 457.692 211.319 457.152 211.559 cv
456.592 211.819 456.052 212.219 455.532 212.739 cv
455.012 213.259 454.572 213.859 454.212 214.499 cv
453.852 215.139 453.572 215.919 453.352 216.799 cv
454.272 216.159 455.212 215.839 456.172 215.839 cv
457.072 215.839 457.852 216.219 458.512 216.939 cv
459.172 217.659 459.512 218.599 459.512 219.739 cv
459.512 220.859 459.172 221.859 458.512 222.779 cv
457.712 223.879 456.632 224.419 455.312 224.419 cv
454.392 224.419 453.632 224.139 453.012 223.539 cv
451.772 222.379 451.152 220.859 451.152 218.999 cv
451.152 217.819 451.372 216.699 451.852 215.619 cv
452.332 214.559 453.012 213.619 453.892 212.779 cv
454.772 211.959 455.632 211.399 456.432 211.119 cv
457.232 210.839 457.992 210.679 458.692 210.679 cv
459.252 210.679 li
453.192 217.519 mo
453.072 218.399 453.012 219.119 453.012 219.639 cv
453.012 220.279 453.112 220.959 453.352 221.679 cv
453.572 222.419 453.912 222.999 454.392 223.419 cv
454.712 223.739 455.112 223.879 455.592 223.879 cv
456.152 223.879 456.672 223.619 457.112 223.079 cv
457.552 222.559 457.792 221.799 457.792 220.799 cv
457.792 219.699 457.552 218.739 457.112 217.919 cv
456.672 217.119 456.032 216.699 455.232 216.699 cv
454.992 216.699 454.712 216.759 454.432 216.859 cv
454.152 216.959 453.732 217.179 453.192 217.519 cv
f
187.228 214.05 mo
186.467 215.71 li
182.488 215.71 li
181.607 217.49 li
183.327 217.75 184.708 218.39 185.708 219.41 cv
186.568 220.29 187.008 221.33 187.008 222.53 cv
187.008 223.23 186.868 223.87 186.587 224.47 cv
186.307 225.07 185.947 225.57 185.508 225.99 cv
185.068 226.41 184.607 226.75 184.087 226.99 cv
183.327 227.33 182.568 227.51 181.788 227.51 cv
180.988 227.51 180.408 227.37 180.048 227.11 cv
179.688 226.85 179.508 226.55 179.508 226.23 cv
179.508 226.05 179.568 225.89 179.727 225.75 cv
179.868 225.61 180.048 225.53 180.288 225.53 cv
180.447 225.53 180.607 225.57 180.727 225.61 cv
180.848 225.67 181.068 225.81 181.387 226.01 cv
181.868 226.35 182.368 226.51 182.868 226.51 cv
183.628 226.51 184.288 226.23 184.868 225.65 cv
185.447 225.09 185.747 224.39 185.747 223.55 cv
185.747 222.75 185.488 222.01 184.967 221.31 cv
184.447 220.63 183.747 220.09 182.848 219.71 cv
182.128 219.43 181.167 219.25 179.947 219.19 cv
182.488 214.05 li
187.228 214.05 li
f
197.508 213.77 mo
197.508 214.13 li
196.648 214.23 195.947 214.41 195.408 214.65 cv
194.848 214.91 194.307 215.31 193.788 215.83 cv
193.268 216.35 192.827 216.95 192.467 217.59 cv
192.107 218.23 191.827 219.01 191.607 219.89 cv
192.527 219.25 193.467 218.93 194.428 218.93 cv
195.327 218.93 196.107 219.31 196.768 220.03 cv
197.428 220.75 197.768 221.69 197.768 222.83 cv
197.768 223.95 197.428 224.95 196.768 225.87 cv
195.967 226.97 194.887 227.51 193.568 227.51 cv
192.648 227.51 191.887 227.23 191.268 226.63 cv
190.027 225.47 189.408 223.95 189.408 222.09 cv
189.408 220.91 189.628 219.79 190.107 218.71 cv
190.587 217.65 191.268 216.71 192.148 215.87 cv
193.027 215.05 193.887 214.49 194.688 214.21 cv
195.488 213.93 196.247 213.77 196.947 213.77 cv
197.508 213.77 li
191.447 220.61 mo
191.327 221.49 191.268 222.21 191.268 222.73 cv
191.268 223.37 191.368 224.05 191.607 224.77 cv
191.827 225.51 192.167 226.09 192.648 226.51 cv
192.967 226.83 193.368 226.97 193.848 226.97 cv
194.408 226.97 194.928 226.71 195.368 226.17 cv
195.807 225.65 196.048 224.89 196.048 223.89 cv
196.048 222.79 195.807 221.83 195.368 221.01 cv
194.928 220.21 194.288 219.79 193.488 219.79 cv
193.247 219.79 192.967 219.85 192.688 219.95 cv
192.408 220.05 191.988 220.27 191.447 220.61 cv
f
201.048 225.39 mo
201.348 225.39 201.607 225.51 201.807 225.71 cv
202.008 225.93 202.128 226.19 202.128 226.47 cv
202.128 226.79 202.008 227.05 201.807 227.25 cv
201.587 227.45 201.327 227.55 201.048 227.55 cv
200.747 227.55 200.488 227.45 200.288 227.25 cv
200.068 227.05 199.967 226.79 199.967 226.47 cv
199.967 226.19 200.068 225.93 200.288 225.71 cv
200.488 225.51 200.747 225.39 201.048 225.39 cv
f
205.568 214.05 mo
212.667 214.05 li
212.667 214.41 li
208.247 227.55 li
207.148 227.55 li
211.107 215.63 li
207.467 215.63 li
206.728 215.63 206.208 215.73 205.887 215.91 cv
205.327 216.21 204.887 216.67 204.568 217.29 cv
204.288 217.19 li
205.568 214.05 li
f
332.851 339.459 mo
331.931 341.999 li
324.111 341.999 li
324.111 341.639 li
326.411 339.559 328.031 337.839 328.971 336.499 cv
329.891 335.179 330.371 333.959 330.371 332.859 cv
330.371 332.019 330.111 331.339 329.591 330.799 cv
329.071 330.259 328.471 329.979 327.771 329.979 cv
327.111 329.979 326.531 330.179 326.011 330.559 cv
325.491 330.939 325.111 331.499 324.871 332.219 cv
324.511 332.219 li
324.671 331.019 325.071 330.099 325.751 329.459 cv
326.431 328.819 327.271 328.479 328.271 328.479 cv
329.351 328.479 330.251 328.839 330.971 329.519 cv
331.691 330.219 332.051 331.039 332.051 331.959 cv
332.051 332.639 331.891 333.299 331.591 333.979 cv
331.091 335.039 330.311 336.159 329.231 337.319 cv
327.611 339.099 326.591 340.159 326.191 340.519 cv
329.651 340.519 li
330.351 340.519 330.851 340.499 331.131 340.439 cv
331.411 340.399 331.671 340.299 331.911 340.139 cv
332.131 339.979 332.331 339.759 332.491 339.459 cv
332.851 339.459 li
f
334.711 331.279 mo
335.071 330.399 335.551 329.699 336.131 329.219 cv
336.711 328.739 337.431 328.479 338.291 328.479 cv
339.351 328.479 340.171 328.839 340.731 329.519 cv
341.151 330.039 341.371 330.599 341.371 331.159 cv
341.371 332.139 340.751 333.139 339.551 334.159 cv
340.351 334.479 340.971 334.939 341.391 335.539 cv
341.811 336.139 342.031 336.819 342.031 337.619 cv
342.031 338.779 341.651 339.759 340.931 340.599 cv
339.971 341.679 338.611 342.219 336.811 342.219 cv
335.911 342.219 335.311 342.099 334.991 341.899 cv
334.671 341.699 334.511 341.459 334.511 341.179 cv
334.511 340.999 334.571 340.839 334.731 340.699 cv
334.871 340.559 335.051 340.479 335.291 340.479 cv
335.451 340.479 335.611 340.519 335.771 340.559 cv
335.891 340.599 336.131 340.719 336.531 340.919 cv
336.911 341.119 337.191 341.239 337.351 341.279 cv
337.591 341.359 337.831 341.379 338.111 341.379 cv
338.771 341.379 339.351 341.139 339.851 340.619 cv
340.331 340.099 340.591 339.499 340.591 338.779 cv
340.591 338.279 340.471 337.779 340.251 337.279 cv
340.071 336.919 339.891 336.659 339.691 336.459 cv
339.411 336.199 339.011 335.959 338.531 335.739 cv
338.051 335.539 337.551 335.419 337.031 335.419 cv
336.731 335.419 li
336.731 335.139 li
337.231 335.079 337.751 334.899 338.271 334.579 cv
338.791 334.279 339.151 333.919 339.391 333.479 cv
339.631 333.059 339.751 332.579 339.751 332.059 cv
339.751 331.399 339.531 330.859 339.111 330.439 cv
338.691 330.039 338.171 329.819 337.551 329.819 cv
336.551 329.819 335.711 330.359 335.031 331.439 cv
334.711 331.279 li
f
346.191 340.099 mo
346.491 340.099 346.751 340.219 346.951 340.419 cv
347.151 340.639 347.271 340.899 347.271 341.179 cv
347.271 341.499 347.151 341.759 346.951 341.959 cv
346.731 342.159 346.471 342.259 346.191 342.259 cv
345.891 342.259 345.631 342.159 345.431 341.959 cv
345.211 341.759 345.111 341.499 345.111 341.179 cv
345.111 340.899 345.211 340.639 345.431 340.419 cv
345.631 340.219 345.891 340.099 346.191 340.099 cv
f
349.711 331.279 mo
350.071 330.399 350.551 329.699 351.131 329.219 cv
351.711 328.739 352.431 328.479 353.291 328.479 cv
354.351 328.479 355.171 328.839 355.731 329.519 cv
356.151 330.039 356.371 330.599 356.371 331.159 cv
356.371 332.139 355.751 333.139 354.551 334.159 cv
355.351 334.479 355.971 334.939 356.391 335.539 cv
356.811 336.139 357.031 336.819 357.031 337.619 cv
357.031 338.779 356.651 339.759 355.931 340.599 cv
354.971 341.679 353.611 342.219 351.811 342.219 cv
350.911 342.219 350.311 342.099 349.991 341.899 cv
349.671 341.699 349.511 341.459 349.511 341.179 cv
349.511 340.999 349.571 340.839 349.731 340.699 cv
349.871 340.559 350.051 340.479 350.291 340.479 cv
350.451 340.479 350.611 340.519 350.771 340.559 cv
350.891 340.599 351.131 340.719 351.531 340.919 cv
351.911 341.119 352.191 341.239 352.351 341.279 cv
352.591 341.359 352.831 341.379 353.111 341.379 cv
353.771 341.379 354.351 341.139 354.851 340.619 cv
355.331 340.099 355.591 339.499 355.591 338.779 cv
355.591 338.279 355.471 337.779 355.251 337.279 cv
355.071 336.919 354.891 336.659 354.691 336.459 cv
354.411 336.199 354.011 335.959 353.531 335.739 cv
353.051 335.539 352.551 335.419 352.031 335.419 cv
351.731 335.419 li
351.731 335.139 li
352.231 335.079 352.751 334.899 353.271 334.579 cv
353.791 334.279 354.151 333.919 354.391 333.479 cv
354.631 333.059 354.751 332.579 354.751 332.059 cv
354.751 331.399 354.531 330.859 354.111 330.439 cv
353.691 330.039 353.171 329.819 352.551 329.819 cv
351.551 329.819 350.711 330.359 350.031 331.439 cv
349.711 331.279 li
f
471.175 358.564 mo
474.395 356.984 li
474.715 356.984 li
474.715 368.164 li
474.715 368.924 474.735 369.384 474.815 369.564 cv
474.875 369.744 474.995 369.884 475.195 369.984 cv
475.395 370.084 475.795 370.145 476.395 370.145 cv
476.395 370.504 li
471.415 370.504 li
471.415 370.145 li
472.035 370.145 472.435 370.084 472.615 369.984 cv
472.795 369.904 472.915 369.764 472.995 369.604 cv
473.075 369.444 473.115 368.964 473.115 368.164 cv
473.115 361.024 li
473.115 360.064 473.075 359.444 473.015 359.164 cv
472.975 358.964 472.895 358.804 472.775 358.704 cv
472.655 358.624 472.495 358.564 472.335 358.564 cv
472.095 358.564 471.755 358.664 471.335 358.864 cv
471.175 358.564 li
f
487.515 357.264 mo
486.755 358.924 li
482.775 358.924 li
481.895 360.704 li
483.615 360.964 484.995 361.604 485.995 362.624 cv
486.855 363.504 487.295 364.544 487.295 365.744 cv
487.295 366.444 487.155 367.084 486.875 367.684 cv
486.595 368.284 486.235 368.784 485.795 369.204 cv
485.355 369.624 484.895 369.964 484.375 370.204 cv
483.615 370.544 482.855 370.724 482.075 370.724 cv
481.275 370.724 480.695 370.584 480.335 370.324 cv
479.975 370.064 479.795 369.764 479.795 369.444 cv
479.795 369.264 479.855 369.104 480.015 368.964 cv
480.155 368.824 480.335 368.744 480.575 368.744 cv
480.735 368.744 480.895 368.784 481.015 368.824 cv
481.135 368.884 481.355 369.024 481.675 369.224 cv
482.155 369.564 482.655 369.724 483.155 369.724 cv
483.915 369.724 484.575 369.444 485.155 368.864 cv
485.735 368.304 486.035 367.604 486.035 366.764 cv
486.035 365.964 485.775 365.224 485.255 364.524 cv
484.735 363.844 484.035 363.304 483.135 362.924 cv
482.415 362.644 481.455 362.464 480.235 362.404 cv
482.775 357.264 li
487.515 357.264 li
f
491.335 368.604 mo
491.635 368.604 491.895 368.724 492.095 368.924 cv
492.295 369.145 492.415 369.404 492.415 369.684 cv
492.415 370.004 492.295 370.264 492.095 370.464 cv
491.875 370.664 491.615 370.764 491.335 370.764 cv
491.035 370.764 490.775 370.664 490.575 370.464 cv
490.355 370.264 490.255 370.004 490.255 369.684 cv
490.255 369.404 490.355 369.145 490.575 368.924 cv
490.775 368.724 491.035 368.604 491.335 368.604 cv
f
494.555 363.964 mo
494.555 362.464 494.775 361.164 495.235 360.064 cv
495.675 358.984 496.295 358.164 497.055 357.624 cv
497.635 357.204 498.235 356.984 498.875 356.984 cv
499.875 356.984 500.795 357.504 501.615 358.544 cv
502.615 359.824 503.115 361.564 503.115 363.764 cv
503.115 365.304 502.895 366.604 502.455 367.684 cv
502.015 368.764 501.435 369.524 500.755 370.004 cv
500.075 370.484 499.415 370.724 498.775 370.724 cv
497.495 370.724 496.455 369.984 495.615 368.504 cv
494.895 367.264 494.555 365.744 494.555 363.964 cv
496.475 364.204 mo
496.475 366.044 496.695 367.524 497.155 368.664 cv
497.515 369.645 498.055 370.124 498.815 370.124 cv
499.155 370.124 499.515 369.984 499.895 369.664 cv
500.275 369.344 500.555 368.824 500.755 368.064 cv
501.055 366.944 501.215 365.364 501.215 363.324 cv
501.215 361.824 501.055 360.564 500.735 359.544 cv
500.495 358.804 500.195 358.284 499.835 357.964 cv
499.555 357.744 499.235 357.624 498.855 357.624 cv
498.415 357.624 498.015 357.824 497.675 358.224 cv
497.195 358.784 496.875 359.624 496.715 360.784 cv
496.555 361.944 496.475 363.084 496.475 364.204 cv
f
515.152 114.518 mo
244.464 114.518 li
243.208 114.516 242.361 114.207 241.818 113.664 cv
241.275 113.121 240.966 112.274 240.965 111.018 cv
240.965 28.1737 li
240.966 26.9172 241.275 26.0698 241.818 25.5272 cv
242.361 24.9845 243.208 24.6756 244.464 24.6737 cv
515.152 24.6737 li
516.408 24.6756 517.256 24.9845 517.798 25.5272 cv
518.341 26.0698 518.65 26.9172 518.652 28.1737 cv
518.652 111.018 li
518.65 112.274 518.341 113.121 517.798 113.664 cv
517.256 114.207 516.408 114.516 515.152 114.518 cv
/1 
<<
/Name (Black)
/CSA /1 get_csa_by_name
/MappedCSA /1 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /1 /CSD get_res sepcs
0 sep
f
515.162 115.518 mo
515.159 115.518 515.155 115.518 515.152 115.518 cv
244.464 115.518 li
244.461 115.518 244.458 115.518 244.454 115.518 cv
243.049 115.518 241.9 115.16 241.111 114.371 cv
240.32 113.58 239.963 112.428 239.964 111.018 cv
239.964 28.1737 li
239.963 26.7635 240.32 25.6111 241.111 24.8201 cv
241.9 24.0316 243.049 23.6737 244.454 23.6737 cv
244.458 23.6737 244.461 23.6737 244.464 23.6737 cv
515.152 23.6737 li
515.155 23.6737 515.159 23.6737 515.162 23.6737 cv
516.568 23.6737 517.717 24.0316 518.505 24.8201 cv
519.296 25.6111 519.654 26.7635 519.652 28.1737 cv
519.652 111.018 li
519.654 112.428 519.296 113.58 518.505 114.371 cv
517.717 115.16 516.568 115.518 515.162 115.518 cv
244.464 114.518 mo
515.152 114.518 li
516.408 114.516 517.256 114.207 517.798 113.664 cv
518.341 113.121 518.65 112.274 518.652 111.018 cv
518.652 28.1737 li
518.65 26.9172 518.341 26.0698 517.798 25.5272 cv
517.256 24.9845 516.408 24.6756 515.152 24.6737 cv
244.464 24.6737 li
243.208 24.6756 242.361 24.9845 241.818 25.5272 cv
241.275 26.0698 240.966 26.9172 240.965 28.1737 cv
240.965 111.018 li
240.966 112.274 241.275 113.121 241.818 113.664 cv
242.361 114.207 243.208 114.516 244.464 114.518 cv
244.464 114.518 li
1 /1 /CSD get_res sepcs
.160784 sep
f
248.464 46.1737 mo
288.465 46.1737 li
288.465 32.1737 li
248.464 32.1737 li
cp
/875257608.0 /Pattern get_res
[1 0 0 -1 0 0 ]make_pattern set_pattern
f
2 vmreclaim
2 lw
0 lc
248.464 46.1737 mo
288.465 46.1737 li
288.465 32.1737 li
248.464 32.1737 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
315.965 32.9337 mo
307.264 45.3737 li
312.704 45.3737 li
313.525 45.3737 314.165 45.1937 314.605 44.8337 cv
315.044 44.4737 315.445 43.7337 315.805 42.6137 cv
316.125 42.6737 li
315.505 46.1737 li
304.725 46.1737 li
304.725 45.8137 li
313.225 33.7137 li
308.984 33.7137 li
308.264 33.7137 307.764 33.7937 307.445 33.9537 cv
307.125 34.1137 306.885 34.3337 306.725 34.6137 cv
306.565 34.9137 306.405 35.4537 306.264 36.2337 cv
305.905 36.2337 li
306.165 32.9337 li
315.965 32.9337 li
f
319.944 32.2937 mo
319.944 38.8337 li
320.664 38.0337 321.224 37.5337 321.644 37.3137 cv
322.064 37.0937 322.484 36.9737 322.924 36.9737 cv
323.424 36.9737 323.864 37.1137 324.224 37.3937 cv
324.584 37.6737 324.864 38.1137 325.044 38.6937 cv
325.164 39.1337 325.224 39.8937 325.224 40.9937 cv
325.224 44.1537 li
325.224 44.7137 325.264 45.1137 325.364 45.3137 cv
325.424 45.4737 325.524 45.6137 325.684 45.6937 cv
325.844 45.7737 326.124 45.8137 326.564 45.8137 cv
326.564 46.1737 li
322.164 46.1737 li
322.164 45.8137 li
322.364 45.8137 li
322.764 45.8137 323.064 45.7537 323.224 45.6337 cv
323.384 45.5137 323.504 45.3137 323.584 45.0737 cv
323.584 44.9737 323.604 44.6737 323.604 44.1537 cv
323.604 40.9937 li
323.604 40.0137 323.544 39.3737 323.444 39.0737 cv
323.344 38.7737 323.184 38.5537 322.964 38.3937 cv
322.744 38.2337 322.484 38.1537 322.164 38.1537 cv
321.844 38.1537 321.504 38.2537 321.164 38.4137 cv
320.824 38.5737 320.424 38.9137 319.944 39.4337 cv
319.944 44.1537 li
319.944 44.7737 319.964 45.1537 320.044 45.2937 cv
320.104 45.4537 320.224 45.5737 320.424 45.6737 cv
320.604 45.7737 320.924 45.8137 321.384 45.8137 cv
321.384 46.1737 li
316.944 46.1737 li
316.944 45.8137 li
317.344 45.8137 317.644 45.7537 317.884 45.6337 cv
318.004 45.5737 318.124 45.4537 318.204 45.2737 cv
318.284 45.0937 318.324 44.7137 318.324 44.1537 cv
318.324 36.0537 li
318.324 35.0337 318.284 34.4137 318.244 34.1737 cv
318.184 33.9337 318.104 33.7737 318.004 33.6937 cv
317.904 33.6137 317.764 33.5737 317.604 33.5737 cv
317.464 33.5737 317.244 33.6337 316.944 33.7137 cv
316.804 33.3737 li
319.484 32.2937 li
319.944 32.2937 li
f
331.684 36.9737 mo
333.044 36.9737 334.124 37.4937 334.944 38.5137 cv
335.624 39.3937 335.984 40.4137 335.984 41.5337 cv
335.984 42.3337 335.784 43.1537 335.404 43.9737 cv
335.024 44.7937 334.504 45.4137 333.824 45.8137 cv
333.144 46.2137 332.404 46.4337 331.584 46.4337 cv
330.224 46.4337 329.164 45.9137 328.364 44.8337 cv
327.684 43.9337 327.364 42.9137 327.364 41.7937 cv
327.364 40.9737 327.564 40.1537 327.964 39.3537 cv
328.364 38.5537 328.904 37.9537 329.564 37.5537 cv
330.224 37.1737 330.924 36.9737 331.684 36.9737 cv
331.384 37.5937 mo
331.024 37.5937 330.684 37.7137 330.344 37.9137 cv
329.984 38.1137 329.704 38.4737 329.504 38.9937 cv
329.284 39.5137 329.184 40.1737 329.184 40.9737 cv
329.184 42.2737 329.424 43.3937 329.944 44.3337 cv
330.464 45.2937 331.144 45.7537 332.004 45.7537 cv
332.624 45.7537 333.144 45.4937 333.564 44.9737 cv
333.964 44.4537 334.184 43.5737 334.184 42.2937 cv
334.184 40.7137 333.824 39.4537 333.144 38.5337 cv
332.684 37.9137 332.104 37.5937 331.384 37.5937 cv
f
345.144 37.2337 mo
345.144 42.6537 li
345.144 43.6937 345.164 44.3137 345.224 44.5537 cv
345.264 44.7937 345.344 44.9537 345.464 45.0337 cv
345.564 45.1337 345.684 45.1737 345.844 45.1737 cv
346.044 45.1737 346.264 45.1137 346.524 44.9937 cv
346.664 45.3337 li
343.984 46.4337 li
343.544 46.4337 li
343.544 44.5537 li
342.764 45.3937 342.184 45.9137 341.784 46.1137 cv
341.384 46.3137 340.944 46.4337 340.504 46.4337 cv
339.984 46.4337 339.544 46.2937 339.184 46.0137 cv
338.824 45.7337 338.564 45.3537 338.424 44.8937 cv
338.284 44.4537 338.224 43.7937 338.224 42.9537 cv
338.224 38.9737 li
338.224 38.5537 338.164 38.2537 338.084 38.0937 cv
337.984 37.9337 337.844 37.7937 337.664 37.7137 cv
337.484 37.6337 337.164 37.5937 336.704 37.5937 cv
336.704 37.2337 li
339.844 37.2337 li
339.844 43.2137 li
339.844 44.0537 339.984 44.6137 340.264 44.8737 cv
340.544 45.1337 340.904 45.2537 341.324 45.2537 cv
341.604 45.2537 341.904 45.1737 342.264 44.9937 cv
342.624 44.8137 343.044 44.4737 343.544 43.9737 cv
343.544 38.9137 li
343.544 38.4137 343.444 38.0737 343.264 37.8937 cv
343.064 37.7137 342.684 37.6137 342.104 37.5937 cv
342.104 37.2337 li
345.144 37.2337 li
f
353.804 40.5937 mo
353.804 41.9337 354.124 42.9737 354.784 43.7137 cv
355.424 44.4737 356.204 44.8537 357.084 44.8537 cv
357.644 44.8537 358.144 44.6937 358.584 44.3737 cv
359.024 44.0537 359.384 43.5137 359.684 42.7137 cv
360.004 42.9137 li
359.844 43.8137 359.444 44.6337 358.804 45.3537 cv
358.144 46.0737 357.324 46.4337 356.324 46.4337 cv
355.244 46.4337 354.324 46.0337 353.564 45.1937 cv
352.804 44.3537 352.424 43.2337 352.424 41.8137 cv
352.424 40.2937 352.804 39.0937 353.604 38.2337 cv
354.384 37.3937 355.364 36.9537 356.564 36.9537 cv
357.564 36.9537 358.384 37.2937 359.024 37.9537 cv
359.664 38.6137 360.004 39.4937 360.004 40.5937 cv
353.804 40.5937 li
353.804 40.0337 mo
357.944 40.0337 li
357.904 39.4737 357.844 39.0537 357.744 38.8137 cv
357.584 38.4537 357.344 38.1737 357.024 37.9737 cv
356.704 37.7737 356.364 37.6537 356.004 37.6537 cv
355.464 37.6537 354.984 37.8737 354.564 38.2937 cv
354.124 38.7137 353.884 39.2937 353.804 40.0337 cv
f
363.784 34.2937 mo
363.784 37.2337 li
365.884 37.2337 li
365.884 37.9137 li
363.784 37.9137 li
363.784 43.7137 li
363.784 44.2937 363.864 44.6937 364.024 44.8937 cv
364.184 45.0937 364.404 45.1937 364.684 45.1937 cv
364.884 45.1937 365.104 45.1337 365.304 44.9937 cv
365.504 44.8737 365.644 44.6737 365.764 44.3937 cv
366.144 44.3937 li
365.904 45.0337 365.584 45.5137 365.184 45.8337 cv
364.764 46.1537 364.344 46.2937 363.904 46.2937 cv
363.584 46.2937 363.284 46.2137 363.004 46.0537 cv
362.724 45.8937 362.504 45.6737 362.384 45.3537 cv
362.244 45.0537 362.184 44.5737 362.184 43.9337 cv
362.184 37.9137 li
360.764 37.9137 li
360.764 37.5937 li
361.124 37.4537 361.484 37.2137 361.864 36.8737 cv
362.224 36.5337 362.564 36.1337 362.864 35.6537 cv
363.004 35.4137 363.204 34.9537 363.484 34.2937 cv
363.784 34.2937 li
f
376.824 44.8937 mo
375.904 45.6137 375.324 46.0137 375.084 46.1137 cv
374.724 46.2537 374.364 46.3337 373.964 46.3337 cv
373.344 46.3337 372.844 46.1337 372.444 45.7137 cv
372.044 45.3137 371.844 44.7537 371.844 44.0537 cv
371.844 43.6137 371.924 43.2337 372.124 42.9137 cv
372.384 42.4737 372.844 42.0737 373.504 41.6737 cv
374.164 41.2937 375.264 40.8137 376.824 40.2537 cv
376.824 39.8937 li
376.824 39.0137 376.664 38.3937 376.384 38.0537 cv
376.104 37.7337 375.684 37.5537 375.164 37.5537 cv
374.744 37.5537 374.424 37.6737 374.184 37.8937 cv
373.924 38.1337 373.804 38.3737 373.804 38.6537 cv
373.824 39.2137 li
373.824 39.5337 373.744 39.7537 373.584 39.9137 cv
373.424 40.0737 373.244 40.1537 373.004 40.1537 cv
372.764 40.1537 372.564 40.0737 372.404 39.9137 cv
372.244 39.7537 372.184 39.5137 372.184 39.2137 cv
372.184 38.6537 372.464 38.1537 373.044 37.6737 cv
373.604 37.2137 374.404 36.9737 375.444 36.9737 cv
376.244 36.9737 376.884 37.1137 377.404 37.3737 cv
377.784 37.5737 378.064 37.8937 378.244 38.3137 cv
378.364 38.5937 378.424 39.1737 378.424 40.0337 cv
378.424 43.0737 li
378.424 43.9337 378.424 44.4537 378.464 44.6337 cv
378.504 44.8337 378.544 44.9537 378.624 45.0137 cv
378.704 45.0937 378.784 45.1137 378.904 45.1137 cv
379.164 45.0537 li
379.304 44.9737 379.564 44.7337 379.964 44.3337 cv
379.964 44.8937 li
379.224 45.8537 378.524 46.3337 377.864 46.3337 cv
377.544 46.3337 377.284 46.2137 377.104 46.0137 cv
376.904 45.8137 376.824 45.4337 376.824 44.8937 cv
376.824 44.2537 mo
376.824 40.8337 li
375.824 41.2337 375.184 41.5137 374.904 41.6737 cv
374.384 41.9537 374.024 42.2537 373.804 42.5737 cv
373.584 42.8937 373.484 43.2337 373.484 43.5937 cv
373.484 44.0737 373.624 44.4537 373.904 44.7737 cv
374.184 45.0937 374.504 45.2337 374.864 45.2337 cv
375.344 45.2337 376.004 44.9137 376.824 44.2537 cv
f
383.704 32.2937 mo
383.704 44.1537 li
383.704 44.7137 383.744 45.0937 383.824 45.2737 cv
383.904 45.4537 384.024 45.5937 384.204 45.6737 cv
384.364 45.7737 384.684 45.8137 385.144 45.8137 cv
385.144 46.1737 li
380.764 46.1737 li
380.764 45.8137 li
381.164 45.8137 381.444 45.7737 381.604 45.6937 cv
381.744 45.6137 381.864 45.4737 381.944 45.2737 cv
382.024 45.0737 382.084 44.7137 382.084 44.1537 cv
382.084 36.0337 li
382.084 35.0337 382.044 34.4137 382.004 34.1737 cv
381.964 33.9337 381.884 33.7737 381.784 33.6937 cv
381.684 33.6137 381.564 33.5737 381.404 33.5737 cv
381.244 33.5737 381.024 33.6337 380.764 33.7137 cv
380.604 33.3737 li
383.264 32.2937 li
383.704 32.2937 li
f
388.064 44.2737 mo
388.364 44.2737 388.624 44.3937 388.824 44.5937 cv
389.024 44.8137 389.144 45.0737 389.144 45.3537 cv
389.144 45.6737 389.024 45.9337 388.824 46.1337 cv
388.604 46.3337 388.344 46.4337 388.064 46.4337 cv
387.764 46.4337 387.504 46.3337 387.304 46.1337 cv
387.084 45.9337 386.984 45.6737 386.984 45.3537 cv
386.984 45.0737 387.084 44.8137 387.304 44.5937 cv
387.504 44.3937 387.764 44.2737 388.064 44.2737 cv
f
248.464 74.455 mo
288.465 74.455 li
288.465 60.455 li
248.464 60.455 li
cp
/875257804.0 /Pattern get_res
[1 0 0 -1 0 0 ]make_pattern set_pattern
f
2 vmreclaim
248.464 74.455 mo
288.465 74.455 li
288.465 60.455 li
248.464 60.455 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
313.625 70.015 mo
308.484 70.015 li
307.585 72.115 li
307.365 72.635 307.264 73.015 307.264 73.255 cv
307.264 73.475 307.345 73.655 307.544 73.815 cv
307.725 73.975 308.145 74.055 308.785 74.095 cv
308.785 74.455 li
304.625 74.455 li
304.625 74.095 li
305.165 74.015 305.525 73.875 305.704 73.715 cv
306.025 73.395 306.385 72.775 306.805 71.815 cv
311.465 60.915 li
311.805 60.915 li
316.405 71.935 li
316.764 72.815 317.105 73.395 317.405 73.655 cv
317.704 73.915 318.125 74.055 318.685 74.095 cv
318.685 74.455 li
313.465 74.455 li
313.465 74.095 li
313.984 74.075 314.325 73.995 314.525 73.835 cv
314.704 73.695 314.805 73.515 314.805 73.275 cv
314.805 72.995 314.665 72.555 314.424 71.935 cv
313.625 70.015 li
313.345 69.295 mo
311.105 63.955 li
308.785 69.295 li
313.345 69.295 li
f
321.805 60.575 mo
322.085 60.575 322.305 60.675 322.505 60.855 cv
322.685 61.055 322.785 61.275 322.785 61.555 cv
322.785 61.835 322.685 62.055 322.505 62.255 cv
322.305 62.455 322.085 62.555 321.805 62.555 cv
321.525 62.555 321.305 62.455 321.105 62.255 cv
320.905 62.055 320.805 61.835 320.805 61.555 cv
320.805 61.275 320.885 61.055 321.085 60.855 cv
321.285 60.675 321.525 60.575 321.805 60.575 cv
322.625 65.255 mo
322.625 72.435 li
322.625 72.995 322.665 73.375 322.745 73.555 cv
322.825 73.755 322.945 73.895 323.105 73.975 cv
323.264 74.055 323.545 74.095 323.965 74.095 cv
323.965 74.455 li
319.625 74.455 li
319.625 74.095 li
320.065 74.095 320.345 74.055 320.505 73.975 cv
320.645 73.895 320.764 73.755 320.845 73.555 cv
320.924 73.355 320.984 72.995 320.984 72.435 cv
320.984 68.995 li
320.984 68.035 320.945 67.395 320.905 67.095 cv
320.865 66.895 320.785 66.755 320.685 66.675 cv
320.585 66.595 320.445 66.535 320.285 66.535 cv
320.105 66.535 319.885 66.595 319.625 66.695 cv
319.484 66.335 li
322.185 65.255 li
322.625 65.255 li
f
328.565 61.935 mo
328.565 67.135 li
330.965 67.135 li
331.525 67.135 331.924 67.015 332.185 66.775 cv
332.424 66.535 332.605 66.055 332.704 65.315 cv
333.065 65.315 li
333.065 69.815 li
332.704 69.815 li
332.685 69.295 332.605 68.915 332.484 68.675 cv
332.365 68.435 332.185 68.255 331.965 68.135 cv
331.725 68.015 331.405 67.955 330.965 67.955 cv
328.565 67.955 li
328.565 72.115 li
328.565 72.795 328.605 73.235 328.685 73.435 cv
328.745 73.595 328.885 73.735 329.085 73.855 cv
329.365 74.015 329.665 74.095 329.984 74.095 cv
330.465 74.095 li
330.465 74.455 li
324.785 74.455 li
324.785 74.095 li
325.264 74.095 li
325.805 74.095 326.204 73.935 326.445 73.615 cv
326.605 73.415 326.685 72.915 326.685 72.115 cv
326.685 63.555 li
326.685 62.895 326.625 62.455 326.544 62.235 cv
326.484 62.075 326.345 61.935 326.145 61.815 cv
325.865 61.655 325.565 61.575 325.264 61.575 cv
324.785 61.575 li
324.785 61.215 li
334.645 61.215 li
334.764 64.115 li
334.424 64.115 li
334.245 63.515 334.044 63.055 333.825 62.775 cv
333.605 62.495 333.325 62.275 333.005 62.135 cv
332.665 62.015 332.165 61.935 331.484 61.935 cv
328.565 61.935 li
f
338.484 60.575 mo
338.764 60.575 338.984 60.675 339.185 60.855 cv
339.365 61.055 339.465 61.275 339.465 61.555 cv
339.465 61.835 339.365 62.055 339.185 62.255 cv
338.984 62.455 338.764 62.555 338.484 62.555 cv
338.204 62.555 337.984 62.455 337.785 62.255 cv
337.585 62.055 337.484 61.835 337.484 61.555 cv
337.484 61.275 337.565 61.055 337.764 60.855 cv
337.965 60.675 338.204 60.575 338.484 60.575 cv
339.305 65.255 mo
339.305 72.435 li
339.305 72.995 339.345 73.375 339.424 73.555 cv
339.505 73.755 339.625 73.895 339.785 73.975 cv
339.944 74.055 340.225 74.095 340.645 74.095 cv
340.645 74.455 li
336.305 74.455 li
336.305 74.095 li
336.745 74.095 337.025 74.055 337.185 73.975 cv
337.324 73.895 337.444 73.755 337.525 73.555 cv
337.604 73.355 337.664 72.995 337.664 72.435 cv
337.664 68.995 li
337.664 68.035 337.625 67.395 337.585 67.095 cv
337.544 66.895 337.465 66.755 337.365 66.675 cv
337.264 66.595 337.125 66.535 336.965 66.535 cv
336.785 66.535 336.565 66.595 336.305 66.695 cv
336.164 66.335 li
338.865 65.255 li
339.305 65.255 li
f
349.324 74.455 mo
344.204 63.315 li
344.204 72.155 li
344.204 72.975 344.285 73.475 344.484 73.675 cv
344.724 73.955 345.104 74.095 345.625 74.095 cv
346.085 74.095 li
346.085 74.455 li
341.484 74.455 li
341.484 74.095 li
341.944 74.095 li
342.504 74.095 342.905 73.935 343.145 73.595 cv
343.264 73.395 343.345 72.915 343.345 72.155 cv
343.345 63.515 li
343.345 62.935 343.285 62.515 343.164 62.235 cv
343.065 62.055 342.884 61.895 342.645 61.775 cv
342.405 61.655 342.004 61.575 341.484 61.575 cv
341.484 61.215 li
345.224 61.215 li
350.025 71.575 li
354.764 61.215 li
358.505 61.215 li
358.505 61.575 li
358.044 61.575 li
357.484 61.575 357.085 61.755 356.845 62.075 cv
356.685 62.295 356.625 62.775 356.625 63.515 cv
356.625 72.155 li
356.625 72.975 356.704 73.475 356.905 73.675 cv
357.145 73.955 357.525 74.095 358.044 74.095 cv
358.505 74.095 li
358.505 74.455 li
352.884 74.455 li
352.884 74.095 li
353.345 74.095 li
353.905 74.095 354.305 73.935 354.544 73.595 cv
354.685 73.395 354.764 72.915 354.764 72.155 cv
354.764 63.315 li
349.645 74.455 li
349.324 74.455 li
f
364.625 73.175 mo
363.705 73.895 363.125 74.295 362.885 74.395 cv
362.525 74.535 362.165 74.615 361.765 74.615 cv
361.145 74.615 360.645 74.415 360.245 73.995 cv
359.845 73.595 359.645 73.035 359.645 72.335 cv
359.645 71.895 359.725 71.515 359.925 71.195 cv
360.185 70.755 360.645 70.355 361.305 69.955 cv
361.965 69.575 363.065 69.095 364.625 68.535 cv
364.625 68.175 li
364.625 67.295 364.465 66.675 364.185 66.335 cv
363.905 66.015 363.485 65.835 362.965 65.835 cv
362.545 65.835 362.225 65.955 361.985 66.175 cv
361.725 66.415 361.605 66.655 361.605 66.935 cv
361.625 67.495 li
361.625 67.815 361.545 68.035 361.385 68.195 cv
361.225 68.355 361.045 68.435 360.805 68.435 cv
360.565 68.435 360.365 68.355 360.205 68.195 cv
360.045 68.035 359.985 67.795 359.985 67.495 cv
359.985 66.935 360.265 66.435 360.845 65.955 cv
361.405 65.495 362.205 65.255 363.245 65.255 cv
364.045 65.255 364.685 65.395 365.205 65.655 cv
365.585 65.855 365.865 66.175 366.045 66.595 cv
366.165 66.875 366.225 67.455 366.225 68.315 cv
366.225 71.355 li
366.225 72.215 366.225 72.735 366.265 72.915 cv
366.305 73.115 366.345 73.235 366.425 73.295 cv
366.505 73.375 366.585 73.395 366.705 73.395 cv
366.965 73.335 li
367.105 73.255 367.365 73.015 367.765 72.615 cv
367.765 73.175 li
367.025 74.135 366.325 74.615 365.665 74.615 cv
365.345 74.615 365.085 74.495 364.905 74.295 cv
364.705 74.095 364.625 73.715 364.625 73.175 cv
364.625 72.535 mo
364.625 69.115 li
363.625 69.515 362.985 69.795 362.705 69.955 cv
362.185 70.235 361.825 70.535 361.605 70.855 cv
361.385 71.175 361.285 71.515 361.285 71.875 cv
361.285 72.355 361.425 72.735 361.705 73.055 cv
361.985 73.375 362.305 73.515 362.665 73.515 cv
363.145 73.515 363.805 73.195 364.625 72.535 cv
f
371.025 62.575 mo
371.025 65.515 li
373.125 65.515 li
373.125 66.195 li
371.025 66.195 li
371.025 71.995 li
371.025 72.575 371.105 72.975 371.265 73.175 cv
371.425 73.375 371.645 73.475 371.925 73.475 cv
372.125 73.475 372.345 73.415 372.545 73.275 cv
372.745 73.155 372.885 72.955 373.005 72.675 cv
373.385 72.675 li
373.145 73.315 372.825 73.795 372.425 74.115 cv
372.005 74.435 371.585 74.575 371.145 74.575 cv
370.825 74.575 370.525 74.495 370.245 74.335 cv
369.965 74.175 369.745 73.955 369.625 73.635 cv
369.485 73.335 369.425 72.855 369.425 72.215 cv
369.425 66.195 li
368.005 66.195 li
368.005 65.875 li
368.365 65.735 368.725 65.495 369.105 65.155 cv
369.465 64.815 369.805 64.415 370.105 63.935 cv
370.245 63.695 370.445 63.235 370.725 62.575 cv
371.025 62.575 li
f
381.585 71.055 mo
381.345 72.235 380.865 73.135 380.165 73.775 cv
379.465 74.415 378.685 74.715 377.845 74.715 cv
376.805 74.715 375.925 74.295 375.165 73.455 cv
374.405 72.615 374.045 71.455 374.045 69.995 cv
374.045 68.595 374.465 67.455 375.305 66.575 cv
376.145 65.695 377.145 65.255 378.325 65.255 cv
379.185 65.255 379.905 65.495 380.465 65.955 cv
381.025 66.415 381.325 66.895 381.325 67.395 cv
381.325 67.655 381.245 67.855 381.085 67.995 cv
380.925 68.155 380.705 68.215 380.425 68.215 cv
380.025 68.215 379.745 68.095 379.565 67.855 cv
379.445 67.735 379.365 67.475 379.325 67.075 cv
379.285 66.695 379.165 66.395 378.945 66.195 cv
378.705 65.995 378.385 65.895 377.985 65.895 cv
377.345 65.895 376.825 66.135 376.425 66.615 cv
375.885 67.255 375.625 68.115 375.625 69.155 cv
375.625 70.235 375.885 71.175 376.405 71.975 cv
376.925 72.795 377.645 73.195 378.545 73.195 cv
379.185 73.195 379.745 72.995 380.265 72.555 cv
380.625 72.255 380.965 71.715 381.305 70.915 cv
381.585 71.055 li
f
385.505 60.575 mo
385.505 67.115 li
386.225 66.315 386.785 65.815 387.205 65.595 cv
387.625 65.375 388.045 65.255 388.485 65.255 cv
388.985 65.255 389.425 65.395 389.785 65.675 cv
390.145 65.955 390.425 66.395 390.605 66.975 cv
390.725 67.415 390.785 68.175 390.785 69.275 cv
390.785 72.435 li
390.785 72.995 390.825 73.395 390.925 73.595 cv
390.985 73.755 391.085 73.895 391.245 73.975 cv
391.405 74.055 391.685 74.095 392.125 74.095 cv
392.125 74.455 li
387.725 74.455 li
387.725 74.095 li
387.925 74.095 li
388.325 74.095 388.625 74.035 388.785 73.915 cv
388.945 73.795 389.065 73.595 389.145 73.355 cv
389.145 73.255 389.165 72.955 389.165 72.435 cv
389.165 69.275 li
389.165 68.295 389.105 67.655 389.005 67.355 cv
388.905 67.055 388.745 66.835 388.525 66.675 cv
388.305 66.515 388.045 66.435 387.725 66.435 cv
387.405 66.435 387.065 66.535 386.725 66.695 cv
386.385 66.855 385.985 67.195 385.505 67.715 cv
385.505 72.435 li
385.505 73.055 385.525 73.435 385.605 73.575 cv
385.665 73.735 385.785 73.855 385.985 73.955 cv
386.165 74.055 386.485 74.095 386.945 74.095 cv
386.945 74.455 li
382.505 74.455 li
382.505 74.095 li
382.905 74.095 383.205 74.035 383.445 73.915 cv
383.565 73.855 383.685 73.735 383.765 73.555 cv
383.845 73.375 383.885 72.995 383.885 72.435 cv
383.885 64.335 li
383.885 63.315 383.845 62.695 383.805 62.455 cv
383.745 62.215 383.665 62.055 383.565 61.975 cv
383.465 61.895 383.325 61.855 383.165 61.855 cv
383.025 61.855 382.805 61.915 382.505 61.995 cv
382.365 61.655 li
385.045 60.575 li
385.505 60.575 li
f
397.365 65.515 mo
401.125 65.515 li
401.125 65.875 li
400.765 65.915 400.545 65.975 400.445 66.055 cv
400.325 66.155 400.285 66.295 400.285 66.475 cv
400.285 66.675 400.325 66.935 400.445 67.215 cv
402.365 72.355 li
404.285 68.175 li
403.785 66.855 li
403.625 66.455 403.405 66.195 403.165 66.035 cv
403.005 65.955 402.745 65.895 402.365 65.875 cv
402.365 65.515 li
406.625 65.515 li
406.625 65.875 li
406.145 65.895 405.825 65.975 405.625 66.115 cv
405.485 66.235 405.425 66.395 405.425 66.615 cv
405.425 66.755 405.445 66.895 405.505 67.015 cv
407.545 72.155 li
409.425 67.215 li
409.545 66.855 409.625 66.575 409.625 66.375 cv
409.625 66.255 409.545 66.135 409.425 66.035 cv
409.305 65.955 409.045 65.895 408.685 65.875 cv
408.685 65.515 li
411.505 65.515 li
411.505 65.875 li
410.925 65.955 410.505 66.335 410.245 67.015 cv
407.265 74.715 li
406.865 74.715 li
404.625 69.015 li
402.025 74.715 li
401.665 74.715 li
398.785 67.215 li
398.585 66.735 398.405 66.415 398.225 66.255 cv
398.045 66.095 397.765 65.955 397.365 65.875 cv
397.365 65.515 li
f
414.585 60.575 mo
414.865 60.575 415.085 60.675 415.285 60.855 cv
415.465 61.055 415.565 61.275 415.565 61.555 cv
415.565 61.835 415.465 62.055 415.285 62.255 cv
415.085 62.455 414.865 62.555 414.585 62.555 cv
414.305 62.555 414.085 62.455 413.885 62.255 cv
413.685 62.055 413.585 61.835 413.585 61.555 cv
413.585 61.275 413.665 61.055 413.865 60.855 cv
414.065 60.675 414.305 60.575 414.585 60.575 cv
415.405 65.255 mo
415.405 72.435 li
415.405 72.995 415.445 73.375 415.525 73.555 cv
415.605 73.755 415.725 73.895 415.885 73.975 cv
416.045 74.055 416.325 74.095 416.745 74.095 cv
416.745 74.455 li
412.405 74.455 li
412.405 74.095 li
412.845 74.095 413.125 74.055 413.285 73.975 cv
413.425 73.895 413.545 73.755 413.625 73.555 cv
413.705 73.355 413.765 72.995 413.765 72.435 cv
413.765 68.995 li
413.765 68.035 413.725 67.395 413.685 67.095 cv
413.645 66.895 413.565 66.755 413.465 66.675 cv
413.365 66.595 413.225 66.535 413.065 66.535 cv
412.885 66.535 412.665 66.595 412.405 66.695 cv
412.265 66.335 li
414.965 65.255 li
415.405 65.255 li
f
420.465 62.575 mo
420.465 65.515 li
422.565 65.515 li
422.565 66.195 li
420.465 66.195 li
420.465 71.995 li
420.465 72.575 420.545 72.975 420.705 73.175 cv
420.865 73.375 421.085 73.475 421.365 73.475 cv
421.565 73.475 421.785 73.415 421.985 73.275 cv
422.185 73.155 422.325 72.955 422.445 72.675 cv
422.825 72.675 li
422.585 73.315 422.265 73.795 421.865 74.115 cv
421.445 74.435 421.025 74.575 420.585 74.575 cv
420.265 74.575 419.965 74.495 419.685 74.335 cv
419.405 74.175 419.185 73.955 419.065 73.635 cv
418.925 73.335 418.865 72.855 418.865 72.215 cv
418.865 66.195 li
417.445 66.195 li
417.445 65.875 li
417.805 65.735 418.165 65.495 418.545 65.155 cv
418.905 64.815 419.245 64.415 419.545 63.935 cv
419.685 63.695 419.885 63.235 420.165 62.575 cv
420.465 62.575 li
f
426.065 60.575 mo
426.065 67.115 li
426.785 66.315 427.345 65.815 427.765 65.595 cv
428.185 65.375 428.605 65.255 429.045 65.255 cv
429.545 65.255 429.985 65.395 430.345 65.675 cv
430.705 65.955 430.985 66.395 431.165 66.975 cv
431.285 67.415 431.345 68.175 431.345 69.275 cv
431.345 72.435 li
431.345 72.995 431.385 73.395 431.485 73.595 cv
431.545 73.755 431.645 73.895 431.805 73.975 cv
431.965 74.055 432.245 74.095 432.685 74.095 cv
432.685 74.455 li
428.285 74.455 li
428.285 74.095 li
428.485 74.095 li
428.885 74.095 429.185 74.035 429.345 73.915 cv
429.505 73.795 429.625 73.595 429.705 73.355 cv
429.705 73.255 429.725 72.955 429.725 72.435 cv
429.725 69.275 li
429.725 68.295 429.665 67.655 429.565 67.355 cv
429.465 67.055 429.305 66.835 429.085 66.675 cv
428.865 66.515 428.605 66.435 428.285 66.435 cv
427.965 66.435 427.625 66.535 427.285 66.695 cv
426.945 66.855 426.545 67.195 426.065 67.715 cv
426.065 72.435 li
426.065 73.055 426.085 73.435 426.165 73.575 cv
426.225 73.735 426.345 73.855 426.545 73.955 cv
426.725 74.055 427.045 74.095 427.505 74.095 cv
427.505 74.455 li
423.065 74.455 li
423.065 74.095 li
423.465 74.095 423.765 74.035 424.005 73.915 cv
424.125 73.855 424.245 73.735 424.325 73.555 cv
424.405 73.375 424.445 72.995 424.445 72.435 cv
424.445 64.335 li
424.445 63.315 424.405 62.695 424.365 62.455 cv
424.305 62.215 424.225 62.055 424.125 61.975 cv
424.025 61.895 423.885 61.855 423.725 61.855 cv
423.585 61.855 423.365 61.915 423.065 61.995 cv
422.925 61.655 li
425.605 60.575 li
426.065 60.575 li
f
437.805 65.255 mo
439.165 65.255 440.245 65.775 441.065 66.795 cv
441.745 67.675 442.105 68.695 442.105 69.815 cv
442.105 70.615 441.905 71.435 441.525 72.255 cv
441.145 73.075 440.625 73.695 439.945 74.095 cv
439.265 74.495 438.525 74.715 437.705 74.715 cv
436.345 74.715 435.285 74.195 434.485 73.115 cv
433.805 72.215 433.485 71.195 433.485 70.075 cv
433.485 69.255 433.685 68.435 434.085 67.635 cv
434.485 66.835 435.025 66.235 435.685 65.835 cv
436.345 65.455 437.045 65.255 437.805 65.255 cv
437.505 65.875 mo
437.145 65.875 436.805 65.995 436.465 66.195 cv
436.105 66.395 435.825 66.755 435.625 67.275 cv
435.405 67.795 435.305 68.455 435.305 69.255 cv
435.305 70.555 435.545 71.675 436.065 72.615 cv
436.585 73.575 437.265 74.035 438.125 74.035 cv
438.745 74.035 439.265 73.775 439.685 73.255 cv
440.085 72.735 440.305 71.855 440.305 70.575 cv
440.305 68.995 439.945 67.735 439.265 66.815 cv
438.805 66.195 438.225 65.875 437.505 65.875 cv
f
451.265 65.515 mo
451.265 70.935 li
451.265 71.975 451.285 72.595 451.345 72.835 cv
451.385 73.075 451.465 73.235 451.585 73.315 cv
451.685 73.415 451.805 73.455 451.965 73.455 cv
452.165 73.455 452.385 73.395 452.645 73.275 cv
452.785 73.615 li
450.105 74.715 li
449.665 74.715 li
449.665 72.835 li
448.885 73.675 448.305 74.195 447.905 74.395 cv
447.505 74.595 447.065 74.715 446.625 74.715 cv
446.105 74.715 445.665 74.575 445.305 74.295 cv
444.945 74.015 444.685 73.635 444.545 73.175 cv
444.405 72.735 444.345 72.075 444.345 71.235 cv
444.345 67.255 li
444.345 66.835 444.285 66.535 444.205 66.375 cv
444.105 66.215 443.965 66.075 443.785 65.995 cv
443.605 65.915 443.285 65.875 442.825 65.875 cv
442.825 65.515 li
445.965 65.515 li
445.965 71.495 li
445.965 72.335 446.105 72.895 446.385 73.155 cv
446.665 73.415 447.025 73.535 447.445 73.535 cv
447.725 73.535 448.025 73.455 448.385 73.275 cv
448.745 73.095 449.165 72.755 449.665 72.255 cv
449.665 67.195 li
449.665 66.695 449.565 66.355 449.385 66.175 cv
449.185 65.995 448.805 65.895 448.225 65.875 cv
448.225 65.515 li
451.265 65.515 li
f
456.025 62.575 mo
456.025 65.515 li
458.125 65.515 li
458.125 66.195 li
456.025 66.195 li
456.025 71.995 li
456.025 72.575 456.105 72.975 456.265 73.175 cv
456.425 73.375 456.645 73.475 456.925 73.475 cv
457.125 73.475 457.345 73.415 457.545 73.275 cv
457.745 73.155 457.885 72.955 458.005 72.675 cv
458.385 72.675 li
458.145 73.315 457.825 73.795 457.425 74.115 cv
457.005 74.435 456.585 74.575 456.145 74.575 cv
455.825 74.575 455.525 74.495 455.245 74.335 cv
454.965 74.175 454.745 73.955 454.625 73.635 cv
454.485 73.335 454.425 72.855 454.425 72.215 cv
454.425 66.195 li
453.005 66.195 li
453.005 65.875 li
453.365 65.735 453.725 65.495 454.105 65.155 cv
454.465 64.815 454.805 64.415 455.105 63.935 cv
455.245 63.695 455.445 63.235 455.725 62.575 cv
456.025 62.575 li
f
482.085 61.215 mo
482.085 61.575 li
481.725 61.575 481.445 61.655 481.245 61.775 cv
481.025 61.895 480.825 62.135 480.625 62.455 cv
480.505 62.695 480.305 63.235 480.025 64.075 cv
476.325 74.735 li
475.925 74.735 li
472.925 66.295 li
469.925 74.735 li
469.565 74.735 li
465.625 63.755 li
465.325 62.955 465.145 62.475 465.065 62.315 cv
464.945 62.075 464.765 61.875 464.545 61.755 cv
464.305 61.635 464.005 61.575 463.625 61.575 cv
463.625 61.215 li
468.525 61.215 li
468.525 61.575 li
468.305 61.575 li
467.945 61.575 467.685 61.655 467.505 61.815 cv
467.305 61.975 467.225 62.155 467.225 62.375 cv
467.225 62.615 467.365 63.135 467.665 63.955 cv
470.265 71.375 li
472.465 65.055 li
472.085 63.955 li
471.765 63.055 li
471.625 62.735 471.465 62.455 471.305 62.195 cv
471.225 62.075 471.105 61.975 470.985 61.895 cv
470.825 61.775 470.665 61.695 470.505 61.635 cv
470.385 61.595 470.185 61.575 469.925 61.575 cv
469.925 61.215 li
475.065 61.215 li
475.065 61.575 li
474.725 61.575 li
474.365 61.575 474.085 61.655 473.925 61.815 cv
473.745 61.975 473.665 62.175 473.665 62.435 cv
473.665 62.775 473.805 63.355 474.105 64.175 cv
476.645 71.375 li
479.165 64.075 li
479.445 63.275 479.605 62.715 479.605 62.395 cv
479.605 62.255 479.545 62.115 479.445 61.995 cv
479.345 61.875 479.225 61.775 479.105 61.715 cv
478.845 61.635 478.525 61.575 478.125 61.575 cv
478.125 61.215 li
482.085 61.215 li
f
485.145 60.575 mo
485.425 60.575 485.645 60.675 485.845 60.855 cv
486.025 61.055 486.125 61.275 486.125 61.555 cv
486.125 61.835 486.025 62.055 485.845 62.255 cv
485.645 62.455 485.425 62.555 485.145 62.555 cv
484.865 62.555 484.645 62.455 484.445 62.255 cv
484.245 62.055 484.145 61.835 484.145 61.555 cv
484.145 61.275 484.225 61.055 484.425 60.855 cv
484.625 60.675 484.865 60.575 485.145 60.575 cv
485.965 65.255 mo
485.965 72.435 li
485.965 72.995 486.005 73.375 486.085 73.555 cv
486.165 73.755 486.285 73.895 486.445 73.975 cv
486.605 74.055 486.885 74.095 487.305 74.095 cv
487.305 74.455 li
482.965 74.455 li
482.965 74.095 li
483.405 74.095 483.685 74.055 483.845 73.975 cv
483.985 73.895 484.105 73.755 484.185 73.555 cv
484.265 73.355 484.325 72.995 484.325 72.435 cv
484.325 68.995 li
484.325 68.035 484.285 67.395 484.245 67.095 cv
484.205 66.895 484.125 66.755 484.025 66.675 cv
483.925 66.595 483.785 66.535 483.625 66.535 cv
483.445 66.535 483.225 66.595 482.965 66.695 cv
482.825 66.335 li
485.525 65.255 li
485.965 65.255 li
f
488.625 69.235 mo
493.665 69.235 li
493.665 70.695 li
488.625 70.695 li
488.625 69.235 li
f
498.565 61.935 mo
498.565 67.135 li
500.965 67.135 li
501.525 67.135 501.924 67.015 502.185 66.775 cv
502.424 66.535 502.605 66.055 502.704 65.315 cv
503.065 65.315 li
503.065 69.815 li
502.704 69.815 li
502.685 69.295 502.605 68.915 502.484 68.675 cv
502.365 68.435 502.185 68.255 501.965 68.135 cv
501.725 68.015 501.405 67.955 500.965 67.955 cv
498.565 67.955 li
498.565 72.115 li
498.565 72.795 498.605 73.235 498.685 73.435 cv
498.745 73.595 498.885 73.735 499.085 73.855 cv
499.365 74.015 499.665 74.095 499.984 74.095 cv
500.465 74.095 li
500.465 74.455 li
494.785 74.455 li
494.785 74.095 li
495.264 74.095 li
495.805 74.095 496.204 73.935 496.445 73.615 cv
496.605 73.415 496.685 72.915 496.685 72.115 cv
496.685 63.555 li
496.685 62.895 496.625 62.455 496.544 62.235 cv
496.484 62.075 496.345 61.935 496.145 61.815 cv
495.865 61.655 495.565 61.575 495.264 61.575 cv
494.785 61.575 li
494.785 61.215 li
504.645 61.215 li
504.764 64.115 li
504.424 64.115 li
504.245 63.515 504.044 63.055 503.825 62.775 cv
503.605 62.495 503.325 62.275 503.005 62.135 cv
502.665 62.015 502.165 61.935 501.484 61.935 cv
498.565 61.935 li
f
508.484 60.575 mo
508.764 60.575 508.984 60.675 509.185 60.855 cv
509.365 61.055 509.465 61.275 509.465 61.555 cv
509.465 61.835 509.365 62.055 509.185 62.255 cv
508.984 62.455 508.764 62.555 508.484 62.555 cv
508.204 62.555 507.984 62.455 507.785 62.255 cv
507.585 62.055 507.484 61.835 507.484 61.555 cv
507.484 61.275 507.565 61.055 507.764 60.855 cv
507.965 60.675 508.204 60.575 508.484 60.575 cv
509.305 65.255 mo
509.305 72.435 li
509.305 72.995 509.345 73.375 509.424 73.555 cv
509.505 73.755 509.625 73.895 509.785 73.975 cv
509.944 74.055 510.225 74.095 510.645 74.095 cv
510.645 74.455 li
506.305 74.455 li
506.305 74.095 li
506.745 74.095 507.025 74.055 507.185 73.975 cv
507.324 73.895 507.444 73.755 507.525 73.555 cv
507.604 73.355 507.664 72.995 507.664 72.435 cv
507.664 68.995 li
507.664 68.035 507.625 67.395 507.585 67.095 cv
507.544 66.895 507.465 66.755 507.365 66.675 cv
507.264 66.595 507.125 66.535 506.965 66.535 cv
506.785 66.535 506.565 66.595 506.305 66.695 cv
506.164 66.335 li
508.865 65.255 li
509.305 65.255 li
f
248.464 102.736 mo
288.465 102.736 li
288.465 88.7362 li
248.464 88.7362 li
cp
/875258000.0 /Pattern get_res
[1 0 0 -1 0 0 ]make_pattern set_pattern
f
2 vmreclaim
248.464 102.736 mo
288.465 102.736 li
288.465 88.7362 li
248.464 88.7362 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
313.625 98.2962 mo
308.484 98.2962 li
307.585 100.396 li
307.365 100.916 307.264 101.296 307.264 101.536 cv
307.264 101.756 307.345 101.936 307.544 102.096 cv
307.725 102.256 308.145 102.336 308.785 102.376 cv
308.785 102.736 li
304.625 102.736 li
304.625 102.376 li
305.165 102.296 305.525 102.156 305.704 101.996 cv
306.025 101.676 306.385 101.056 306.805 100.096 cv
311.465 89.1962 li
311.805 89.1962 li
316.405 100.216 li
316.764 101.096 317.105 101.676 317.405 101.936 cv
317.704 102.196 318.125 102.336 318.685 102.376 cv
318.685 102.736 li
313.465 102.736 li
313.465 102.376 li
313.984 102.356 314.325 102.276 314.525 102.116 cv
314.704 101.976 314.805 101.796 314.805 101.556 cv
314.805 101.276 314.665 100.836 314.424 100.216 cv
313.625 98.2962 li
313.345 97.5762 mo
311.105 92.2362 li
308.785 97.5762 li
313.345 97.5762 li
f
321.805 88.8562 mo
322.085 88.8562 322.305 88.9562 322.505 89.1362 cv
322.685 89.3362 322.785 89.5562 322.785 89.8362 cv
322.785 90.1162 322.685 90.3362 322.505 90.5362 cv
322.305 90.7362 322.085 90.8362 321.805 90.8362 cv
321.525 90.8362 321.305 90.7362 321.105 90.5362 cv
320.905 90.3362 320.805 90.1162 320.805 89.8362 cv
320.805 89.5562 320.885 89.3362 321.085 89.1362 cv
321.285 88.9562 321.525 88.8562 321.805 88.8562 cv
322.625 93.5362 mo
322.625 100.716 li
322.625 101.276 322.665 101.656 322.745 101.836 cv
322.825 102.036 322.945 102.176 323.105 102.256 cv
323.264 102.336 323.545 102.376 323.965 102.376 cv
323.965 102.736 li
319.625 102.736 li
319.625 102.376 li
320.065 102.376 320.345 102.336 320.505 102.256 cv
320.645 102.176 320.764 102.036 320.845 101.836 cv
320.924 101.636 320.984 101.276 320.984 100.716 cv
320.984 97.2762 li
320.984 96.3162 320.945 95.6762 320.905 95.3762 cv
320.865 95.1762 320.785 95.0362 320.685 94.9562 cv
320.585 94.8762 320.445 94.8162 320.285 94.8162 cv
320.105 94.8162 319.885 94.8762 319.625 94.9762 cv
319.484 94.6162 li
322.185 93.5362 li
322.625 93.5362 li
f
328.565 90.2162 mo
328.565 95.4162 li
330.965 95.4162 li
331.525 95.4162 331.924 95.2962 332.185 95.0562 cv
332.424 94.8162 332.605 94.3362 332.704 93.5962 cv
333.065 93.5962 li
333.065 98.0962 li
332.704 98.0962 li
332.685 97.5762 332.605 97.1962 332.484 96.9562 cv
332.365 96.7162 332.185 96.5362 331.965 96.4162 cv
331.725 96.2962 331.405 96.2362 330.965 96.2362 cv
328.565 96.2362 li
328.565 100.396 li
328.565 101.076 328.605 101.516 328.685 101.716 cv
328.745 101.876 328.885 102.016 329.085 102.136 cv
329.365 102.296 329.665 102.376 329.984 102.376 cv
330.465 102.376 li
330.465 102.736 li
324.785 102.736 li
324.785 102.376 li
325.264 102.376 li
325.805 102.376 326.204 102.216 326.445 101.896 cv
326.605 101.696 326.685 101.196 326.685 100.396 cv
326.685 91.8362 li
326.685 91.1762 326.625 90.7362 326.544 90.5162 cv
326.484 90.3562 326.345 90.2162 326.145 90.0962 cv
325.865 89.9362 325.565 89.8562 325.264 89.8562 cv
324.785 89.8562 li
324.785 89.4962 li
334.645 89.4962 li
334.764 92.3962 li
334.424 92.3962 li
334.245 91.7962 334.044 91.3362 333.825 91.0562 cv
333.605 90.7762 333.325 90.5562 333.005 90.4162 cv
332.665 90.2962 332.165 90.2162 331.484 90.2162 cv
328.565 90.2162 li
f
338.484 88.8562 mo
338.764 88.8562 338.984 88.9562 339.185 89.1362 cv
339.365 89.3362 339.465 89.5562 339.465 89.8362 cv
339.465 90.1162 339.365 90.3362 339.185 90.5362 cv
338.984 90.7362 338.764 90.8362 338.484 90.8362 cv
338.204 90.8362 337.984 90.7362 337.785 90.5362 cv
337.585 90.3362 337.484 90.1162 337.484 89.8362 cv
337.484 89.5562 337.565 89.3362 337.764 89.1362 cv
337.965 88.9562 338.204 88.8562 338.484 88.8562 cv
339.305 93.5362 mo
339.305 100.716 li
339.305 101.276 339.345 101.656 339.424 101.836 cv
339.505 102.036 339.625 102.176 339.785 102.256 cv
339.944 102.336 340.225 102.376 340.645 102.376 cv
340.645 102.736 li
336.305 102.736 li
336.305 102.376 li
336.745 102.376 337.025 102.336 337.185 102.256 cv
337.324 102.176 337.444 102.036 337.525 101.836 cv
337.604 101.636 337.664 101.276 337.664 100.716 cv
337.664 97.2762 li
337.664 96.3162 337.625 95.6762 337.585 95.3762 cv
337.544 95.1762 337.465 95.0362 337.365 94.9562 cv
337.264 94.8762 337.125 94.8162 336.965 94.8162 cv
336.785 94.8162 336.565 94.8762 336.305 94.9762 cv
336.164 94.6162 li
338.865 93.5362 li
339.305 93.5362 li
f
349.324 102.736 mo
344.204 91.5962 li
344.204 100.436 li
344.204 101.256 344.285 101.756 344.484 101.956 cv
344.724 102.236 345.104 102.376 345.625 102.376 cv
346.085 102.376 li
346.085 102.736 li
341.484 102.736 li
341.484 102.376 li
341.944 102.376 li
342.504 102.376 342.905 102.216 343.145 101.876 cv
343.264 101.676 343.345 101.196 343.345 100.436 cv
343.345 91.7962 li
343.345 91.2162 343.285 90.7962 343.164 90.5162 cv
343.065 90.3362 342.884 90.1762 342.645 90.0562 cv
342.405 89.9362 342.004 89.8562 341.484 89.8562 cv
341.484 89.4962 li
345.224 89.4962 li
350.025 99.8562 li
354.764 89.4962 li
358.505 89.4962 li
358.505 89.8562 li
358.044 89.8562 li
357.484 89.8562 357.085 90.0362 356.845 90.3562 cv
356.685 90.5762 356.625 91.0562 356.625 91.7962 cv
356.625 100.436 li
356.625 101.256 356.704 101.756 356.905 101.956 cv
357.145 102.236 357.525 102.376 358.044 102.376 cv
358.505 102.376 li
358.505 102.736 li
352.884 102.736 li
352.884 102.376 li
353.345 102.376 li
353.905 102.376 354.305 102.216 354.544 101.876 cv
354.685 101.676 354.764 101.196 354.764 100.436 cv
354.764 91.5962 li
349.645 102.736 li
349.324 102.736 li
f
364.625 101.456 mo
363.705 102.176 363.125 102.576 362.885 102.676 cv
362.525 102.816 362.165 102.896 361.765 102.896 cv
361.145 102.896 360.645 102.696 360.245 102.276 cv
359.845 101.876 359.645 101.316 359.645 100.616 cv
359.645 100.176 359.725 99.7962 359.925 99.4762 cv
360.185 99.0362 360.645 98.6362 361.305 98.2362 cv
361.965 97.8562 363.065 97.3762 364.625 96.8162 cv
364.625 96.4562 li
364.625 95.5762 364.465 94.9562 364.185 94.6162 cv
363.905 94.2962 363.485 94.1162 362.965 94.1162 cv
362.545 94.1162 362.225 94.2362 361.985 94.4562 cv
361.725 94.6962 361.605 94.9362 361.605 95.2162 cv
361.625 95.7762 li
361.625 96.0962 361.545 96.3162 361.385 96.4762 cv
361.225 96.6362 361.045 96.7162 360.805 96.7162 cv
360.565 96.7162 360.365 96.6362 360.205 96.4762 cv
360.045 96.3162 359.985 96.0762 359.985 95.7762 cv
359.985 95.2162 360.265 94.7162 360.845 94.2362 cv
361.405 93.7762 362.205 93.5362 363.245 93.5362 cv
364.045 93.5362 364.685 93.6762 365.205 93.9362 cv
365.585 94.1362 365.865 94.4562 366.045 94.8762 cv
366.165 95.1562 366.225 95.7362 366.225 96.5962 cv
366.225 99.6362 li
366.225 100.496 366.225 101.016 366.265 101.196 cv
366.305 101.396 366.345 101.516 366.425 101.576 cv
366.505 101.656 366.585 101.676 366.705 101.676 cv
366.965 101.616 li
367.105 101.536 367.365 101.296 367.765 100.896 cv
367.765 101.456 li
367.025 102.416 366.325 102.896 365.665 102.896 cv
365.345 102.896 365.085 102.776 364.905 102.576 cv
364.705 102.376 364.625 101.996 364.625 101.456 cv
364.625 100.816 mo
364.625 97.3962 li
363.625 97.7962 362.985 98.0762 362.705 98.2362 cv
362.185 98.5162 361.825 98.8162 361.605 99.1362 cv
361.385 99.4562 361.285 99.7962 361.285 100.156 cv
361.285 100.636 361.425 101.016 361.705 101.336 cv
361.985 101.656 362.305 101.796 362.665 101.796 cv
363.145 101.796 363.805 101.476 364.625 100.816 cv
f
371.025 90.8562 mo
371.025 93.7962 li
373.125 93.7962 li
373.125 94.4762 li
371.025 94.4762 li
371.025 100.276 li
371.025 100.856 371.105 101.256 371.265 101.456 cv
371.425 101.656 371.645 101.756 371.925 101.756 cv
372.125 101.756 372.345 101.696 372.545 101.556 cv
372.745 101.436 372.885 101.236 373.005 100.956 cv
373.385 100.956 li
373.145 101.596 372.825 102.076 372.425 102.396 cv
372.005 102.716 371.585 102.856 371.145 102.856 cv
370.825 102.856 370.525 102.776 370.245 102.616 cv
369.965 102.456 369.745 102.236 369.625 101.916 cv
369.485 101.616 369.425 101.136 369.425 100.496 cv
369.425 94.4762 li
368.005 94.4762 li
368.005 94.1562 li
368.365 94.0162 368.725 93.7762 369.105 93.4362 cv
369.465 93.0962 369.805 92.6962 370.105 92.2162 cv
370.245 91.9762 370.445 91.5162 370.725 90.8562 cv
371.025 90.8562 li
f
381.585 99.3362 mo
381.345 100.516 380.865 101.416 380.165 102.056 cv
379.465 102.696 378.685 102.996 377.845 102.996 cv
376.805 102.996 375.925 102.576 375.165 101.736 cv
374.405 100.896 374.045 99.7362 374.045 98.2762 cv
374.045 96.8762 374.465 95.7362 375.305 94.8562 cv
376.145 93.9762 377.145 93.5362 378.325 93.5362 cv
379.185 93.5362 379.905 93.7762 380.465 94.2362 cv
381.025 94.6962 381.325 95.1762 381.325 95.6762 cv
381.325 95.9362 381.245 96.1362 381.085 96.2762 cv
380.925 96.4362 380.705 96.4962 380.425 96.4962 cv
380.025 96.4962 379.745 96.3762 379.565 96.1362 cv
379.445 96.0162 379.365 95.7562 379.325 95.3562 cv
379.285 94.9762 379.165 94.6762 378.945 94.4762 cv
378.705 94.2762 378.385 94.1762 377.985 94.1762 cv
377.345 94.1762 376.825 94.4162 376.425 94.8962 cv
375.885 95.5362 375.625 96.3962 375.625 97.4362 cv
375.625 98.5162 375.885 99.4562 376.405 100.256 cv
376.925 101.076 377.645 101.476 378.545 101.476 cv
379.185 101.476 379.745 101.276 380.265 100.836 cv
380.625 100.536 380.965 99.9962 381.305 99.1962 cv
381.585 99.3362 li
f
385.505 88.8562 mo
385.505 95.3962 li
386.225 94.5962 386.785 94.0962 387.205 93.8762 cv
387.625 93.6562 388.045 93.5362 388.485 93.5362 cv
388.985 93.5362 389.425 93.6762 389.785 93.9562 cv
390.145 94.2362 390.425 94.6762 390.605 95.2562 cv
390.725 95.6962 390.785 96.4562 390.785 97.5562 cv
390.785 100.716 li
390.785 101.276 390.825 101.676 390.925 101.876 cv
390.985 102.036 391.085 102.176 391.245 102.256 cv
391.405 102.336 391.685 102.376 392.125 102.376 cv
392.125 102.736 li
387.725 102.736 li
387.725 102.376 li
387.925 102.376 li
388.325 102.376 388.625 102.316 388.785 102.196 cv
388.945 102.076 389.065 101.876 389.145 101.636 cv
389.145 101.536 389.165 101.236 389.165 100.716 cv
389.165 97.5562 li
389.165 96.5762 389.105 95.9362 389.005 95.6362 cv
388.905 95.3362 388.745 95.1162 388.525 94.9562 cv
388.305 94.7962 388.045 94.7162 387.725 94.7162 cv
387.405 94.7162 387.065 94.8162 386.725 94.9762 cv
386.385 95.1362 385.985 95.4762 385.505 95.9962 cv
385.505 100.716 li
385.505 101.336 385.525 101.716 385.605 101.856 cv
385.665 102.016 385.785 102.136 385.985 102.236 cv
386.165 102.336 386.485 102.376 386.945 102.376 cv
386.945 102.736 li
382.505 102.736 li
382.505 102.376 li
382.905 102.376 383.205 102.316 383.445 102.196 cv
383.565 102.136 383.685 102.016 383.765 101.836 cv
383.845 101.656 383.885 101.276 383.885 100.716 cv
383.885 92.6162 li
383.885 91.5962 383.845 90.9762 383.805 90.7362 cv
383.745 90.4962 383.665 90.3362 383.565 90.2562 cv
383.465 90.1762 383.325 90.1362 383.165 90.1362 cv
383.025 90.1362 382.805 90.1962 382.505 90.2762 cv
382.365 89.9362 li
385.045 88.8562 li
385.505 88.8562 li
f
397.365 93.7962 mo
401.125 93.7962 li
401.125 94.1562 li
400.765 94.1962 400.545 94.2562 400.445 94.3362 cv
400.325 94.4362 400.285 94.5762 400.285 94.7562 cv
400.285 94.9562 400.325 95.2162 400.445 95.4962 cv
402.365 100.636 li
404.285 96.4562 li
403.785 95.1362 li
403.625 94.7362 403.405 94.4762 403.165 94.3162 cv
403.005 94.2362 402.745 94.1762 402.365 94.1562 cv
402.365 93.7962 li
406.625 93.7962 li
406.625 94.1562 li
406.145 94.1762 405.825 94.2562 405.625 94.3962 cv
405.485 94.5162 405.425 94.6762 405.425 94.8962 cv
405.425 95.0362 405.445 95.1762 405.505 95.2962 cv
407.545 100.436 li
409.425 95.4962 li
409.545 95.1362 409.625 94.8562 409.625 94.6562 cv
409.625 94.5362 409.545 94.4162 409.425 94.3162 cv
409.305 94.2362 409.045 94.1762 408.685 94.1562 cv
408.685 93.7962 li
411.505 93.7962 li
411.505 94.1562 li
410.925 94.2362 410.505 94.6162 410.245 95.2962 cv
407.265 102.996 li
406.865 102.996 li
404.625 97.2962 li
402.025 102.996 li
401.665 102.996 li
398.785 95.4962 li
398.585 95.0162 398.405 94.6962 398.225 94.5362 cv
398.045 94.3762 397.765 94.2362 397.365 94.1562 cv
397.365 93.7962 li
f
414.585 88.8562 mo
414.865 88.8562 415.085 88.9562 415.285 89.1362 cv
415.465 89.3362 415.565 89.5562 415.565 89.8362 cv
415.565 90.1162 415.465 90.3362 415.285 90.5362 cv
415.085 90.7362 414.865 90.8362 414.585 90.8362 cv
414.305 90.8362 414.085 90.7362 413.885 90.5362 cv
413.685 90.3362 413.585 90.1162 413.585 89.8362 cv
413.585 89.5562 413.665 89.3362 413.865 89.1362 cv
414.065 88.9562 414.305 88.8562 414.585 88.8562 cv
415.405 93.5362 mo
415.405 100.716 li
415.405 101.276 415.445 101.656 415.525 101.836 cv
415.605 102.036 415.725 102.176 415.885 102.256 cv
416.045 102.336 416.325 102.376 416.745 102.376 cv
416.745 102.736 li
412.405 102.736 li
412.405 102.376 li
412.845 102.376 413.125 102.336 413.285 102.256 cv
413.425 102.176 413.545 102.036 413.625 101.836 cv
413.705 101.636 413.765 101.276 413.765 100.716 cv
413.765 97.2762 li
413.765 96.3162 413.725 95.6762 413.685 95.3762 cv
413.645 95.1762 413.565 95.0362 413.465 94.9562 cv
413.365 94.8762 413.225 94.8162 413.065 94.8162 cv
412.885 94.8162 412.665 94.8762 412.405 94.9762 cv
412.265 94.6162 li
414.965 93.5362 li
415.405 93.5362 li
f
420.465 90.8562 mo
420.465 93.7962 li
422.565 93.7962 li
422.565 94.4762 li
420.465 94.4762 li
420.465 100.276 li
420.465 100.856 420.545 101.256 420.705 101.456 cv
420.865 101.656 421.085 101.756 421.365 101.756 cv
421.565 101.756 421.785 101.696 421.985 101.556 cv
422.185 101.436 422.325 101.236 422.445 100.956 cv
422.825 100.956 li
422.585 101.596 422.265 102.076 421.865 102.396 cv
421.445 102.716 421.025 102.856 420.585 102.856 cv
420.265 102.856 419.965 102.776 419.685 102.616 cv
419.405 102.456 419.185 102.236 419.065 101.916 cv
418.925 101.616 418.865 101.136 418.865 100.496 cv
418.865 94.4762 li
417.445 94.4762 li
417.445 94.1562 li
417.805 94.0162 418.165 93.7762 418.545 93.4362 cv
418.905 93.0962 419.245 92.6962 419.545 92.2162 cv
419.685 91.9762 419.885 91.5162 420.165 90.8562 cv
420.465 90.8562 li
f
426.065 88.8562 mo
426.065 95.3962 li
426.785 94.5962 427.345 94.0962 427.765 93.8762 cv
428.185 93.6562 428.605 93.5362 429.045 93.5362 cv
429.545 93.5362 429.985 93.6762 430.345 93.9562 cv
430.705 94.2362 430.985 94.6762 431.165 95.2562 cv
431.285 95.6962 431.345 96.4562 431.345 97.5562 cv
431.345 100.716 li
431.345 101.276 431.385 101.676 431.485 101.876 cv
431.545 102.036 431.645 102.176 431.805 102.256 cv
431.965 102.336 432.245 102.376 432.685 102.376 cv
432.685 102.736 li
428.285 102.736 li
428.285 102.376 li
428.485 102.376 li
428.885 102.376 429.185 102.316 429.345 102.196 cv
429.505 102.076 429.625 101.876 429.705 101.636 cv
429.705 101.536 429.725 101.236 429.725 100.716 cv
429.725 97.5562 li
429.725 96.5762 429.665 95.9362 429.565 95.6362 cv
429.465 95.3362 429.305 95.1162 429.085 94.9562 cv
428.865 94.7962 428.605 94.7162 428.285 94.7162 cv
427.965 94.7162 427.625 94.8162 427.285 94.9762 cv
426.945 95.1362 426.545 95.4762 426.065 95.9962 cv
426.065 100.716 li
426.065 101.336 426.085 101.716 426.165 101.856 cv
426.225 102.016 426.345 102.136 426.545 102.236 cv
426.725 102.336 427.045 102.376 427.505 102.376 cv
427.505 102.736 li
423.065 102.736 li
423.065 102.376 li
423.465 102.376 423.765 102.316 424.005 102.196 cv
424.125 102.136 424.245 102.016 424.325 101.836 cv
424.405 101.656 424.445 101.276 424.445 100.716 cv
424.445 92.6162 li
424.445 91.5962 424.405 90.9762 424.365 90.7362 cv
424.305 90.4962 424.225 90.3362 424.125 90.2562 cv
424.025 90.1762 423.885 90.1362 423.725 90.1362 cv
423.585 90.1362 423.365 90.1962 423.065 90.2762 cv
422.925 89.9362 li
425.605 88.8562 li
426.065 88.8562 li
f
456.525 89.4962 mo
456.525 89.8562 li
456.165 89.8562 455.885 89.9362 455.685 90.0562 cv
455.465 90.1762 455.265 90.4162 455.065 90.7362 cv
454.945 90.9762 454.745 91.5162 454.465 92.3562 cv
450.765 103.016 li
450.365 103.016 li
447.365 94.5762 li
444.365 103.016 li
444.005 103.016 li
440.065 92.0362 li
439.765 91.2362 439.585 90.7562 439.505 90.5962 cv
439.385 90.3562 439.205 90.1562 438.985 90.0362 cv
438.745 89.9162 438.445 89.8562 438.065 89.8562 cv
438.065 89.4962 li
442.965 89.4962 li
442.965 89.8562 li
442.745 89.8562 li
442.385 89.8562 442.125 89.9362 441.945 90.0962 cv
441.745 90.2562 441.665 90.4362 441.665 90.6562 cv
441.665 90.8962 441.805 91.4162 442.105 92.2362 cv
444.705 99.6562 li
446.905 93.3362 li
446.525 92.2362 li
446.205 91.3362 li
446.065 91.0162 445.905 90.7362 445.745 90.4762 cv
445.665 90.3562 445.545 90.2562 445.425 90.1762 cv
445.265 90.0562 445.105 89.9762 444.945 89.9162 cv
444.825 89.8762 444.625 89.8562 444.365 89.8562 cv
444.365 89.4962 li
449.505 89.4962 li
449.505 89.8562 li
449.165 89.8562 li
448.805 89.8562 448.525 89.9362 448.365 90.0962 cv
448.185 90.2562 448.105 90.4562 448.105 90.7162 cv
448.105 91.0562 448.245 91.6362 448.545 92.4562 cv
451.085 99.6562 li
453.605 92.3562 li
453.885 91.5562 454.045 90.9962 454.045 90.6762 cv
454.045 90.5362 453.985 90.3962 453.885 90.2762 cv
453.785 90.1562 453.665 90.0562 453.545 89.9962 cv
453.285 89.9162 452.965 89.8562 452.565 89.8562 cv
452.565 89.4962 li
456.525 89.4962 li
f
459.585 88.8562 mo
459.865 88.8562 460.085 88.9562 460.285 89.1362 cv
460.465 89.3362 460.565 89.5562 460.565 89.8362 cv
460.565 90.1162 460.465 90.3362 460.285 90.5362 cv
460.085 90.7362 459.865 90.8362 459.585 90.8362 cv
459.305 90.8362 459.085 90.7362 458.885 90.5362 cv
458.685 90.3362 458.585 90.1162 458.585 89.8362 cv
458.585 89.5562 458.665 89.3362 458.865 89.1362 cv
459.065 88.9562 459.305 88.8562 459.585 88.8562 cv
460.405 93.5362 mo
460.405 100.716 li
460.405 101.276 460.445 101.656 460.525 101.836 cv
460.605 102.036 460.725 102.176 460.885 102.256 cv
461.045 102.336 461.325 102.376 461.745 102.376 cv
461.745 102.736 li
457.405 102.736 li
457.405 102.376 li
457.845 102.376 458.125 102.336 458.285 102.256 cv
458.425 102.176 458.545 102.036 458.625 101.836 cv
458.705 101.636 458.765 101.276 458.765 100.716 cv
458.765 97.2762 li
458.765 96.3162 458.725 95.6762 458.685 95.3762 cv
458.645 95.1762 458.565 95.0362 458.465 94.9562 cv
458.365 94.8762 458.225 94.8162 458.065 94.8162 cv
457.885 94.8162 457.665 94.8762 457.405 94.9762 cv
457.265 94.6162 li
459.965 93.5362 li
460.405 93.5362 li
f
463.065 97.5162 mo
468.105 97.5162 li
468.105 98.9762 li
463.065 98.9762 li
463.065 97.5162 li
f
473.005 90.2162 mo
473.005 95.4162 li
475.405 95.4162 li
475.965 95.4162 476.365 95.2962 476.625 95.0562 cv
476.865 94.8162 477.045 94.3362 477.145 93.5962 cv
477.505 93.5962 li
477.505 98.0962 li
477.145 98.0962 li
477.125 97.5762 477.045 97.1962 476.924 96.9562 cv
476.805 96.7162 476.625 96.5362 476.405 96.4162 cv
476.165 96.2962 475.845 96.2362 475.405 96.2362 cv
473.005 96.2362 li
473.005 100.396 li
473.005 101.076 473.045 101.516 473.125 101.716 cv
473.185 101.876 473.325 102.016 473.525 102.136 cv
473.805 102.296 474.105 102.376 474.424 102.376 cv
474.905 102.376 li
474.905 102.736 li
469.225 102.736 li
469.225 102.376 li
469.704 102.376 li
470.245 102.376 470.645 102.216 470.885 101.896 cv
471.045 101.696 471.125 101.196 471.125 100.396 cv
471.125 91.8362 li
471.125 91.1762 471.065 90.7362 470.984 90.5162 cv
470.924 90.3562 470.785 90.2162 470.585 90.0962 cv
470.305 89.9362 470.005 89.8562 469.704 89.8562 cv
469.225 89.8562 li
469.225 89.4962 li
479.085 89.4962 li
479.204 92.3962 li
478.865 92.3962 li
478.685 91.7962 478.484 91.3362 478.265 91.0562 cv
478.045 90.7762 477.765 90.5562 477.445 90.4162 cv
477.105 90.2962 476.605 90.2162 475.924 90.2162 cv
473.005 90.2162 li
f
482.924 88.8562 mo
483.204 88.8562 483.424 88.9562 483.625 89.1362 cv
483.805 89.3362 483.905 89.5562 483.905 89.8362 cv
483.905 90.1162 483.805 90.3362 483.625 90.5362 cv
483.424 90.7362 483.204 90.8362 482.924 90.8362 cv
482.645 90.8362 482.424 90.7362 482.225 90.5362 cv
482.025 90.3362 481.924 90.1162 481.924 89.8362 cv
481.924 89.5562 482.005 89.3362 482.204 89.1362 cv
482.405 88.9562 482.645 88.8562 482.924 88.8562 cv
483.745 93.5362 mo
483.745 100.716 li
483.745 101.276 483.785 101.656 483.865 101.836 cv
483.945 102.036 484.065 102.176 484.225 102.256 cv
484.384 102.336 484.665 102.376 485.085 102.376 cv
485.085 102.736 li
480.745 102.736 li
480.745 102.376 li
481.185 102.376 481.465 102.336 481.625 102.256 cv
481.764 102.176 481.884 102.036 481.965 101.836 cv
482.044 101.636 482.104 101.276 482.104 100.716 cv
482.104 97.2762 li
482.104 96.3162 482.065 95.6762 482.025 95.3762 cv
481.984 95.1762 481.905 95.0362 481.805 94.9562 cv
481.704 94.8762 481.565 94.8162 481.405 94.8162 cv
481.225 94.8162 481.005 94.8762 480.745 94.9762 cv
480.604 94.6162 li
483.305 93.5362 li
483.745 93.5362 li
f
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 /1 ]]
[/Pattern [/875257608.0 /875257804.0 /875258000.0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
